"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var _types_1 = require("./_types");
/**
 * Container object for a "wrapped function"
 */
var NexusWrappedType = /** @class */ (function () {
    function NexusWrappedType(name, wrappedFn) {
        this.name = name;
        this.wrappedFn = wrappedFn;
    }
    Object.defineProperty(NexusWrappedType.prototype, "fn", {
        get: function () {
            return this.wrappedFn;
        },
        enumerable: true,
        configurable: true
    });
    return NexusWrappedType;
}());
exports.NexusWrappedType = NexusWrappedType;
_types_1.withNexusSymbol(NexusWrappedType, _types_1.NexusTypes.WrappedType);
/**
 * Useful primarily for plugins, where you want to delay the execution
 * of a block until other metadata exists from the root.
 *
 * @param fn
 */
function nexusWrappedType(name, fn) {
    return new NexusWrappedType(name, fn);
}
exports.nexusWrappedType = nexusWrappedType;
var NamedTypeDefs = new Set([
    _types_1.NexusTypes.Enum,
    _types_1.NexusTypes.Object,
    _types_1.NexusTypes.Scalar,
    _types_1.NexusTypes.Union,
    _types_1.NexusTypes.Interface,
    _types_1.NexusTypes.InputObject,
]);
function isNexusTypeDef(obj) {
    return obj && Boolean(obj[_types_1.NexusWrappedSymbol]);
}
exports.isNexusTypeDef = isNexusTypeDef;
function isNexusNamedTypeDef(obj) {
    return isNexusTypeDef(obj) && NamedTypeDefs.has(obj[_types_1.NexusWrappedSymbol]);
}
exports.isNexusNamedTypeDef = isNexusNamedTypeDef;
function isNexusExtendInputTypeDef(obj) {
    return (isNexusTypeDef(obj) &&
        obj[_types_1.NexusWrappedSymbol] === _types_1.NexusTypes.ExtendInputObject);
}
exports.isNexusExtendInputTypeDef = isNexusExtendInputTypeDef;
function isNexusExtendTypeDef(obj) {
    return (isNexusTypeDef(obj) && obj[_types_1.NexusWrappedSymbol] === _types_1.NexusTypes.ExtendObject);
}
exports.isNexusExtendTypeDef = isNexusExtendTypeDef;
function isNexusWrappedType(obj) {
    return (isNexusTypeDef(obj) && obj[_types_1.NexusWrappedSymbol] === _types_1.NexusTypes.WrappedType);
}
exports.isNexusWrappedType = isNexusWrappedType;
function isNexusEnumTypeDef(obj) {
    return isNexusTypeDef(obj) && obj[_types_1.NexusWrappedSymbol] === _types_1.NexusTypes.Enum;
}
exports.isNexusEnumTypeDef = isNexusEnumTypeDef;
function isNexusInputObjectTypeDef(obj) {
    return (isNexusTypeDef(obj) && obj[_types_1.NexusWrappedSymbol] === _types_1.NexusTypes.InputObject);
}
exports.isNexusInputObjectTypeDef = isNexusInputObjectTypeDef;
function isNexusObjectTypeDef(obj) {
    return isNexusTypeDef(obj) && obj[_types_1.NexusWrappedSymbol] === _types_1.NexusTypes.Object;
}
exports.isNexusObjectTypeDef = isNexusObjectTypeDef;
function isNexusScalarTypeDef(obj) {
    return isNexusTypeDef(obj) && obj[_types_1.NexusWrappedSymbol] === _types_1.NexusTypes.Scalar;
}
exports.isNexusScalarTypeDef = isNexusScalarTypeDef;
function isNexusUnionTypeDef(obj) {
    return isNexusTypeDef(obj) && obj[_types_1.NexusWrappedSymbol] === _types_1.NexusTypes.Union;
}
exports.isNexusUnionTypeDef = isNexusUnionTypeDef;
function isNexusInterfaceTypeDef(obj) {
    return (isNexusTypeDef(obj) && obj[_types_1.NexusWrappedSymbol] === _types_1.NexusTypes.Interface);
}
exports.isNexusInterfaceTypeDef = isNexusInterfaceTypeDef;
function isNexusArgDef(obj) {
    return isNexusTypeDef(obj) && obj[_types_1.NexusWrappedSymbol] === _types_1.NexusTypes.Arg;
}
exports.isNexusArgDef = isNexusArgDef;
function isNexusDynamicOutputMethod(obj) {
    return (isNexusTypeDef(obj) && obj[_types_1.NexusWrappedSymbol] === _types_1.NexusTypes.DynamicOutput);
}
exports.isNexusDynamicOutputMethod = isNexusDynamicOutputMethod;
function isNexusDynamicInputMethod(obj) {
    return (isNexusTypeDef(obj) && obj[_types_1.NexusWrappedSymbol] === _types_1.NexusTypes.DynamicInput);
}
exports.isNexusDynamicInputMethod = isNexusDynamicInputMethod;
//# sourceMappingURL=wrapping.js.map