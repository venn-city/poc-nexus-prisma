"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var definitionBlocks_1 = require("./definitionBlocks");
var _types_1 = require("./_types");
var graphql_1 = require("graphql");
var ObjectDefinitionBlock = /** @class */ (function (_super) {
    tslib_1.__extends(ObjectDefinitionBlock, _super);
    function ObjectDefinitionBlock(typeBuilder) {
        var _this = _super.call(this, typeBuilder) || this;
        _this.typeBuilder = typeBuilder;
        return _this;
    }
    /**
     * @param interfaceName
     */
    ObjectDefinitionBlock.prototype.implements = function () {
        var interfaceName = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            interfaceName[_i] = arguments[_i];
        }
        this.typeBuilder.addInterfaces(interfaceName);
    };
    /**
     * Modifies a field added via an interface
     */
    ObjectDefinitionBlock.prototype.modify = function (field, modifications) {
        this.typeBuilder.addFieldModifications(tslib_1.__assign({}, modifications, { field: field }));
    };
    return ObjectDefinitionBlock;
}(definitionBlocks_1.OutputDefinitionBlock));
exports.ObjectDefinitionBlock = ObjectDefinitionBlock;
var NexusObjectTypeDef = /** @class */ (function () {
    function NexusObjectTypeDef(name, config) {
        this.name = name;
        this.config = config;
        graphql_1.assertValidName(name);
    }
    Object.defineProperty(NexusObjectTypeDef.prototype, "value", {
        get: function () {
            return this.config;
        },
        enumerable: true,
        configurable: true
    });
    return NexusObjectTypeDef;
}());
exports.NexusObjectTypeDef = NexusObjectTypeDef;
_types_1.withNexusSymbol(NexusObjectTypeDef, _types_1.NexusTypes.Object);
function objectType(config) {
    return new NexusObjectTypeDef(config.name, config);
}
exports.objectType = objectType;
function queryType(config) {
    return objectType(tslib_1.__assign({}, config, { name: "Query" }));
}
exports.queryType = queryType;
function mutationType(config) {
    return objectType(tslib_1.__assign({}, config, { name: "Mutation" }));
}
exports.mutationType = mutationType;
//# sourceMappingURL=objectType.js.map