import { GraphQLNamedType } from "graphql";
import { SchemaBuilder } from "../builder";
import { NexusEnumTypeDef } from "./enumType";
import { NexusExtendTypeDef } from "./extendType";
import { NexusInputObjectTypeDef } from "./inputObjectType";
import { NexusInterfaceTypeDef } from "./interfaceType";
import { NexusObjectTypeDef } from "./objectType";
import { NexusScalarTypeDef } from "./scalarType";
import { NexusUnionTypeDef } from "./unionType";
import { NexusTypes, NexusWrappedSymbol } from "./_types";
import { NexusExtendInputTypeDef } from "./extendInputType";
import {
  DynamicOutputMethodDef,
  DynamicInputMethodDef,
} from "../dynamicMethod";
import { NexusArgDef } from "./args";
export declare type AllNexusInputTypeDefs<T extends string = string> =
  | NexusInputObjectTypeDef<T>
  | NexusEnumTypeDef<T>
  | NexusScalarTypeDef<T>;
export declare type AllNexusOutputTypeDefs =
  | NexusObjectTypeDef<string>
  | NexusInterfaceTypeDef<string>
  | NexusUnionTypeDef<string>
  | NexusEnumTypeDef<string>
  | NexusScalarTypeDef<string>;
export declare type AllNexusNamedTypeDefs =
  | AllNexusInputTypeDefs
  | AllNexusOutputTypeDefs;
export declare type AllTypeDefs =
  | AllNexusInputTypeDefs
  | AllNexusOutputTypeDefs
  | GraphQLNamedType;
export declare type WrappedTypeFn<T extends AllNexusNamedTypeDefs> = (
  builder: SchemaBuilder
) => T;
/**
 * Container object for a "wrapped function"
 */
export declare class NexusWrappedType<T extends AllNexusNamedTypeDefs> {
  readonly name: string;
  protected wrappedFn: WrappedTypeFn<T>;
  constructor(name: string, wrappedFn: WrappedTypeFn<T>);
  readonly fn: WrappedTypeFn<T>;
}
/**
 * Useful primarily for plugins, where you want to delay the execution
 * of a block until other metadata exists from the root.
 *
 * @param fn
 */
export declare function nexusWrappedType<T extends AllNexusNamedTypeDefs>(
  name: string,
  fn: WrappedTypeFn<T>
): NexusWrappedType<T>;
export declare function isNexusTypeDef(
  obj: any
): obj is {
  [NexusWrappedSymbol]: NexusTypes;
};
export declare function isNexusNamedTypeDef(
  obj: any
): obj is AllNexusNamedTypeDefs;
export declare function isNexusExtendInputTypeDef(
  obj: any
): obj is NexusExtendInputTypeDef<string>;
export declare function isNexusExtendTypeDef(
  obj: any
): obj is NexusExtendTypeDef<string>;
export declare function isNexusWrappedType(
  obj: any
): obj is NexusWrappedType<AllNexusNamedTypeDefs>;
export declare function isNexusEnumTypeDef(
  obj: any
): obj is NexusEnumTypeDef<string>;
export declare function isNexusInputObjectTypeDef(
  obj: any
): obj is NexusInputObjectTypeDef<string>;
export declare function isNexusObjectTypeDef(
  obj: any
): obj is NexusObjectTypeDef<string>;
export declare function isNexusScalarTypeDef(
  obj: any
): obj is NexusScalarTypeDef<string>;
export declare function isNexusUnionTypeDef(
  obj: any
): obj is NexusUnionTypeDef<string>;
export declare function isNexusInterfaceTypeDef(
  obj: any
): obj is NexusInterfaceTypeDef<string>;
export declare function isNexusArgDef(obj: any): obj is NexusArgDef<string>;
export declare function isNexusDynamicOutputMethod<T extends string>(
  obj: any
): obj is DynamicOutputMethodDef<T>;
export declare function isNexusDynamicInputMethod<T extends string>(
  obj: any
): obj is DynamicInputMethodDef<T>;
