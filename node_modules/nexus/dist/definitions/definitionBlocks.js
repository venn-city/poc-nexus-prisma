"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
/**
 * The output definition block is passed to the "definition"
 * argument of the
 */
var OutputDefinitionBlock = /** @class */ (function () {
    function OutputDefinitionBlock(typeBuilder, isList) {
        if (isList === void 0) { isList = false; }
        this.typeBuilder = typeBuilder;
        this.isList = isList;
        this.typeName = typeBuilder.typeName;
        this.typeBuilder.addDynamicOutputFields(this, isList);
    }
    Object.defineProperty(OutputDefinitionBlock.prototype, "list", {
        get: function () {
            if (this.isList) {
                throw new Error("Cannot chain list.list, in the definition block. Use `list: []` config value");
            }
            return new OutputDefinitionBlock(this.typeBuilder, true);
        },
        enumerable: true,
        configurable: true
    });
    OutputDefinitionBlock.prototype.string = function (fieldName) {
        var opts = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            opts[_i - 1] = arguments[_i];
        }
        this.addScalarField(fieldName, "String", opts);
    };
    OutputDefinitionBlock.prototype.int = function (fieldName) {
        var opts = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            opts[_i - 1] = arguments[_i];
        }
        this.addScalarField(fieldName, "Int", opts);
    };
    OutputDefinitionBlock.prototype.boolean = function (fieldName) {
        var opts = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            opts[_i - 1] = arguments[_i];
        }
        this.addScalarField(fieldName, "Boolean", opts);
    };
    OutputDefinitionBlock.prototype.id = function (fieldName) {
        var opts = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            opts[_i - 1] = arguments[_i];
        }
        this.addScalarField(fieldName, "ID", opts);
    };
    OutputDefinitionBlock.prototype.float = function (fieldName) {
        var opts = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            opts[_i - 1] = arguments[_i];
        }
        this.addScalarField(fieldName, "Float", opts);
    };
    OutputDefinitionBlock.prototype.field = function (name, fieldConfig) {
        var field = tslib_1.__assign({ name: name }, fieldConfig);
        this.typeBuilder.addField(this.decorateField(field));
    };
    OutputDefinitionBlock.prototype.addScalarField = function (fieldName, typeName, opts) {
        var config = {
            name: fieldName,
            type: typeName,
        };
        if (typeof opts[0] === "function") {
            config.resolve = opts[0];
        }
        else {
            config = tslib_1.__assign({}, config, opts[0]);
        }
        this.typeBuilder.addField(this.decorateField(config));
    };
    OutputDefinitionBlock.prototype.decorateField = function (config) {
        if (this.isList) {
            if (config.list) {
                console.warn("It looks like you chained .list and set list for " + config.name + ". " +
                    "You should only do one or the other");
            }
            else {
                config.list = true;
            }
        }
        return config;
    };
    return OutputDefinitionBlock;
}());
exports.OutputDefinitionBlock = OutputDefinitionBlock;
var InputDefinitionBlock = /** @class */ (function () {
    function InputDefinitionBlock(typeBuilder, isList) {
        if (isList === void 0) { isList = false; }
        this.typeBuilder = typeBuilder;
        this.isList = isList;
        this.typeName = typeBuilder.typeName;
        this.typeBuilder.addDynamicInputFields(this, isList);
    }
    Object.defineProperty(InputDefinitionBlock.prototype, "list", {
        get: function () {
            if (this.isList) {
                throw new Error("Cannot chain list.list, in the definition block. Use `list: []` config value");
            }
            return new InputDefinitionBlock(this.typeBuilder, true);
        },
        enumerable: true,
        configurable: true
    });
    InputDefinitionBlock.prototype.string = function (fieldName, opts) {
        this.addScalarField(fieldName, "String", opts);
    };
    InputDefinitionBlock.prototype.int = function (fieldName, opts) {
        this.addScalarField(fieldName, "Int", opts);
    };
    InputDefinitionBlock.prototype.boolean = function (fieldName, opts) {
        this.addScalarField(fieldName, "Boolean", opts);
    };
    InputDefinitionBlock.prototype.id = function (fieldName, opts) {
        this.addScalarField(fieldName, "ID", opts);
    };
    InputDefinitionBlock.prototype.float = function (fieldName, opts) {
        this.addScalarField(fieldName, "Float", opts);
    };
    InputDefinitionBlock.prototype.field = function (fieldName, fieldConfig) {
        this.typeBuilder.addField(this.decorateField(tslib_1.__assign({ name: fieldName }, fieldConfig)));
    };
    InputDefinitionBlock.prototype.addScalarField = function (fieldName, typeName, opts) {
        if (opts === void 0) { opts = {}; }
        this.typeBuilder.addField(this.decorateField(tslib_1.__assign({ name: fieldName, type: typeName }, opts)));
    };
    InputDefinitionBlock.prototype.decorateField = function (config) {
        if (this.isList) {
            if (config.list) {
                console.warn("It looks like you chained .list and set list for " + config.name +
                    "You should only do one or the other");
            }
            else {
                config.list = true;
            }
        }
        return config;
    };
    return InputDefinitionBlock;
}());
exports.InputDefinitionBlock = InputDefinitionBlock;
//# sourceMappingURL=definitionBlocks.js.map