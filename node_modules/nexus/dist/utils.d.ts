import {
  GraphQLObjectType,
  GraphQLInterfaceType,
  GraphQLSchema,
  GraphQLInputObjectType,
  GraphQLUnionType,
  GraphQLEnumType,
  GraphQLScalarType,
} from "graphql";
export declare function log(msg: string): void;
export declare function withDeprecationComment(
  description?: string | null
): string | null | undefined;
export declare const isInterfaceField: (
  type: GraphQLObjectType<
    any,
    any,
    {
      [key: string]: any;
    }
  >,
  fieldName: string
) => boolean;
/**
 *
 * Copied from graphql-js:
 *
 */
/**
 * Given an invalid input string and a list of valid options, returns a filtered
 * list of valid options sorted based on their similarity with the input.
 */
export declare function suggestionList(
  input?: string,
  options?: string[]
): string[];
export declare function objValues<T>(obj: Record<string, T>): T[];
export declare function mapObj<T, R>(
  obj: Record<string, T>,
  mapper: (val: T, key: string, index: number) => R
): R[];
export declare function eachObj<T>(
  obj: Record<string, T>,
  iter: (val: T, key: string, index: number) => void
): void;
export declare const isObject: (obj: any) => boolean;
export declare const assertAbsolutePath: (
  pathName: string,
  property: string
) => string;
export interface GroupedTypes {
  input: GraphQLInputObjectType[];
  interface: GraphQLInterfaceType[];
  object: GraphQLObjectType[];
  union: GraphQLUnionType[];
  enum: GraphQLEnumType[];
  scalar: Array<
    GraphQLScalarType & {
      asNexusMethod?: string;
    }
  >;
}
export declare function groupTypes(schema: GraphQLSchema): GroupedTypes;
export declare function firstDefined<T>(...args: Array<T | undefined>): T;
export declare function isPromise(value: any): value is PromiseLike<any>;
export declare function relativePathTo(
  absolutePath: string,
  outputPath: string
): string;
