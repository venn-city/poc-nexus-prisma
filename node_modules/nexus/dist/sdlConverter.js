"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var graphql_1 = require("graphql");
var utils_1 = require("./utils");
function convertSDL(sdl, commonjs, json) {
    if (commonjs === void 0) { commonjs = false; }
    if (json === void 0) { json = JSON; }
    try {
        return new SDLConverter(sdl, commonjs, json).print();
    }
    catch (e) {
        return "Error Parsing SDL into Schema: " + e.stack;
    }
}
exports.convertSDL = convertSDL;
/**
 * Convert an existing SDL schema into a GraphQL Nexus format
 */
var SDLConverter = /** @class */ (function () {
    function SDLConverter(sdl, commonjs, json) {
        if (commonjs === void 0) { commonjs = false; }
        if (json === void 0) { json = JSON; }
        this.commonjs = commonjs;
        this.json = json;
        this.usedImports = new Set();
        this.exports = new Set();
        this.export = commonjs === null || commonjs ? "const " : "export const ";
        this.schema = graphql_1.buildSchema(sdl);
        this.groupedTypes = utils_1.groupTypes(this.schema);
    }
    SDLConverter.prototype.print = function () {
        var body = [
            this.printObjectTypes(),
            this.printInterfaceTypes(),
            this.printInputObjectTypes(),
            this.printUnionTypes(),
            this.printEnumTypes(),
            this.printScalarTypes(),
            this.printExports(),
        ];
        return [this.printUsedImports()]
            .concat(body)
            .filter(function (f) { return f; })
            .join("\n\n");
    };
    SDLConverter.prototype.printUsedImports = function () {
        if (this.commonjs) {
            return "const { " + Array.from(this.usedImports).join(", ") + " } = require('nexus');";
        }
        return "import { " + Array.from(this.usedImports).join(", ") + " } from 'nexus';";
    };
    SDLConverter.prototype.printObjectTypes = function () {
        var _this = this;
        if (this.groupedTypes.object.length > 0) {
            this.usedImports.add("objectType");
            return this.groupedTypes.object
                .map(function (t) { return _this.printObjectType(t); })
                .join("\n");
        }
        return "";
    };
    SDLConverter.prototype.printObjectType = function (type) {
        var implementing = type.getInterfaces().map(function (i) { return i.name; });
        var implementsInterfaces = implementing.length > 0
            ? "    t.implements(" + implementing.join(", ") + ")"
            : "";
        this.exports.add(type.name);
        return this.printBlock([
            "" + this.export + type.name + " = objectType({",
            "  name: \"" + type.name + "\",",
            "  definition(t) {",
            implementsInterfaces,
            this.printObjectFields(type),
            "  }",
            "})",
        ]);
    };
    SDLConverter.prototype.printObjectFields = function (type) {
        var _this = this;
        return utils_1.objValues(type.getFields())
            .map(function (field) {
            if (graphql_1.isObjectType(type) && utils_1.isInterfaceField(type, field.name)) {
                return;
            }
            return _this.printField("output", field);
        })
            .filter(function (f) { return f; })
            .join("\n");
    };
    SDLConverter.prototype.printInputObjectFields = function (type) {
        var _this = this;
        return utils_1.objValues(type.getFields())
            .map(function (field) { return _this.printField("input", field); })
            .filter(function (f) { return f; })
            .join("\n");
    };
    SDLConverter.prototype.printField = function (source, field) {
        var _a = unwrapType(field.type), list = _a.list, fieldType = _a.type, isNonNull = _a.isNonNull;
        var prefix = list.length === 1 && list[0] === true ? "t.list." : "t.";
        return "    " + prefix + this.printFieldMethod(source, field, fieldType, list, isNonNull);
    };
    SDLConverter.prototype.printFieldMethod = function (source, field, type, list, isNonNull) {
        var _this = this;
        var objectMeta = {};
        var str = "";
        if (isCommonScalar(type)) {
            str += type.name.toLowerCase() + "(\"" + field.name + "\"";
        }
        else {
            objectMeta.type = type;
            str += "field(\"" + field.name + "\"";
        }
        if ("deprecationReason" in field && field.deprecationReason) {
            objectMeta.deprecation = field.deprecationReason;
        }
        if (list.length > 1 || list[0] === false) {
            objectMeta.list = list;
        }
        if (!isNonNull && source === "output") {
            objectMeta.nullable = true;
        }
        else if (isNonNull && source === "input") {
            objectMeta.required = true;
        }
        if (field.description) {
            objectMeta.description = field.description;
        }
        if (source === "output") {
            var outputField = field;
            if (outputField.args.length) {
                objectMeta.args = outputField.args;
            }
        }
        else {
            var inputField = field;
            if (inputField.defaultValue !== undefined) {
                objectMeta.default = inputField.defaultValue;
            }
        }
        var metaKeys = Object.keys(objectMeta);
        if (metaKeys.length > 0) {
            if (metaKeys.length === 1 && !objectMeta.args) {
                var key = metaKeys[0];
                str += ", { " + key + ": " + this.printMeta(objectMeta[key], key) + " }";
            }
            else {
                str += ", {\n";
                utils_1.eachObj(objectMeta, function (val, key) {
                    str += "      " + key + ": " + _this.printMeta(val, key) + ",\n";
                });
                str += "    }";
            }
        }
        return str + ")";
    };
    SDLConverter.prototype.printMeta = function (val, key) {
        var _this = this;
        if (key === "type") {
            return val;
        }
        if (key === "list" || key === "required") {
            return Array.isArray(val)
                ? "[" + val.join(", ") + "]"
                : this.json.stringify(val);
        }
        if (key === "args") {
            var str_1 = "{\n";
            val.forEach(function (arg) {
                str_1 += "        " + arg.name + ": " + _this.printArg(arg) + "\n";
            });
            str_1 += "      }";
            return str_1;
        }
        return this.json.stringify(val);
    };
    SDLConverter.prototype.printArg = function (arg) {
        var description = arg.description;
        var _a = unwrapType(arg.type), list = _a.list, isNonNull = _a.isNonNull, type = _a.type;
        var isArg = !isCommonScalar(type);
        var str = "";
        if (isArg) {
            this.usedImports.add("arg");
            str += "arg(";
        }
        else {
            this.usedImports.add(type.toString().toLowerCase() + "Arg");
            str += type.toString().toLowerCase() + "Arg(";
        }
        var metaToAdd = [];
        if (isArg) {
            metaToAdd.push("type: " + type.name);
        }
        if (description) {
            metaToAdd.push("description: " + JSON.stringify(description));
        }
        if (list.length) {
            metaToAdd.push(list.length === 1 && list[0] === true
                ? "list: true"
                : "list: [" + list.join(", ") + "]");
        }
        if (arg.defaultValue !== undefined) {
            metaToAdd.push("default: " + this.json.stringify(arg.defaultValue));
        }
        if (isNonNull) {
            metaToAdd.push("required: true");
        }
        str +=
            metaToAdd.length > 1
                ? "{\n          " + metaToAdd.join(",\n          ") + "\n        }"
                : metaToAdd.length
                    ? "{ " + metaToAdd[0] + " }"
                    : "";
        return str + "),";
    };
    SDLConverter.prototype.printInterfaceTypes = function () {
        var _this = this;
        if (this.groupedTypes.interface.length) {
            this.usedImports.add("interfaceType");
            return this.groupedTypes.interface
                .map(function (t) { return _this.printInterfaceType(t); })
                .join("\n");
        }
        return "";
    };
    SDLConverter.prototype.printInterfaceType = function (type) {
        this.exports.add(type.name);
        return this.printBlock([
            "" + this.export + type.name + " = interfaceType({",
            "  name: \"" + type.name + "\",",
            this.maybeDescription(type),
            "  definition(t) {",
            this.printObjectFields(type),
            "    t.resolveType(() => null)",
            "  }",
            "});",
        ]);
    };
    SDLConverter.prototype.printEnumTypes = function () {
        var _this = this;
        if (this.groupedTypes.enum.length) {
            this.usedImports.add("enumType");
            return this.groupedTypes.enum
                .map(function (t) { return _this.printEnumType(t); })
                .join("\n");
        }
        return "";
    };
    SDLConverter.prototype.printEnumType = function (type) {
        var members = type.getValues().map(function (val) {
            var description = val.description, name = val.name, deprecationReason = val.deprecationReason, value = val.value;
            if (!description && !deprecationReason && name === value) {
                return val.name;
            }
            return { description: description, name: name, deprecated: deprecationReason, value: value };
        });
        this.exports.add(type.name);
        return this.printBlock([
            "" + this.export + type.name + " = enumType({",
            "  name: \"" + type.name + "\",",
            this.maybeDescription(type),
            "  members: " + this.json.stringify(members) + ",",
            "});",
        ]);
    };
    SDLConverter.prototype.printInputObjectTypes = function () {
        var _this = this;
        if (this.groupedTypes.input.length) {
            this.usedImports.add("inputObjectType");
            return this.groupedTypes.input
                .map(function (t) { return _this.printInputObjectType(t); })
                .join("\n");
        }
        return "";
    };
    SDLConverter.prototype.printInputObjectType = function (type) {
        this.exports.add(type.name);
        return this.printBlock([
            "" + this.export + type.name + " = inputObjectType({",
            "  name: \"" + type.name + "\",",
            this.maybeDescription(type),
            "  definition(t) {",
            this.printInputObjectFields(type),
            "  }",
            "});",
        ]);
    };
    SDLConverter.prototype.printUnionTypes = function () {
        var _this = this;
        if (this.groupedTypes.union.length) {
            this.usedImports.add("unionType");
            return this.groupedTypes.union
                .map(function (t) { return _this.printUnionType(t); })
                .join("\n");
        }
        return "";
    };
    SDLConverter.prototype.printUnionType = function (type) {
        this.exports.add(type.name);
        return this.printBlock([
            "" + this.export + type.name + " = unionType({",
            "  name: \"" + type.name + "\",",
            this.maybeDescription(type),
            "  definition(t) {",
            "    t.members(" + type.getTypes().join(", ") + ")",
            "  }",
            "});",
        ]);
    };
    SDLConverter.prototype.printScalarTypes = function () {
        var _this = this;
        if (this.groupedTypes.scalar.length) {
            this.usedImports.add("scalarType");
            return this.groupedTypes.scalar
                .filter(function (s) { return !graphql_1.isSpecifiedScalarType(s); })
                .map(function (t) { return _this.printScalarType(t); })
                .join("\n");
        }
        return "";
    };
    SDLConverter.prototype.printScalarType = function (type) {
        this.exports.add(type.name);
        return this.printBlock([
            "" + this.export + type.name + " = scalarType({",
            "  name: \"" + type.name + "\",",
            this.maybeDescription(type),
            this.maybeAsNexusType(type),
            "  serialize() { /* Todo */ },",
            "  parseValue() { /* Todo */ },",
            "  parseLiteral() { /* Todo */ }",
            "});",
        ]);
    };
    SDLConverter.prototype.printExports = function () {
        if (!this.commonjs || this.exports.size === 0) {
            return "";
        }
        var exports = Array.from(this.exports);
        return this.printBlock(exports.map(function (exp) { return "exports." + exp + " = " + exp + ";"; }));
    };
    SDLConverter.prototype.maybeAsNexusType = function (type) {
        if (isCommonScalar(type)) {
            return "  asNexusMethod: \"" + type.name.toLowerCase() + "\",";
        }
        return null;
    };
    SDLConverter.prototype.maybeDescription = function (type) {
        if (type.description) {
            return "  description: " + this.json.stringify(type.description) + ",";
        }
        return null;
    };
    SDLConverter.prototype.printBlock = function (block) {
        return block.filter(function (t) { return t !== null && t !== ""; }).join("\n");
    };
    return SDLConverter;
}());
exports.SDLConverter = SDLConverter;
function unwrapType(type) {
    var finalType = type;
    var isNonNull = false;
    var list = [];
    while (graphql_1.isWrappingType(finalType)) {
        while (graphql_1.isListType(finalType)) {
            finalType = finalType.ofType;
            if (graphql_1.isNonNullType(finalType)) {
                finalType = finalType.ofType;
                list.unshift(true);
            }
            else {
                list.unshift(false);
            }
        }
        if (graphql_1.isNonNullType(finalType)) {
            isNonNull = true;
            finalType = finalType.ofType;
        }
    }
    return { type: finalType, isNonNull: isNonNull, list: list };
}
function isCommonScalar(field) {
    if (graphql_1.isScalarType(field)) {
        return (graphql_1.isSpecifiedScalarType(field) ||
            field.name === "UUID" ||
            field.name === "Date");
    }
    return false;
}
//# sourceMappingURL=sdlConverter.js.map