"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var graphql_1 = require("graphql");
var nexus_1 = require("nexus");
var graphqlToNexus_1 = require("./graphqlToNexus");
var PrismaSchemaBuilder = /** @class */ (function (_super) {
    __extends(PrismaSchemaBuilder, _super);
    function PrismaSchemaBuilder(config) {
        var _this = _super.call(this, config) || this;
        _this.config = config;
        _this.datamodelInfo = __assign({}, _this.config.prisma.datamodelInfo, { schema: graphql_1.buildClientSchema(_this.config.prisma.datamodelInfo.schema) });
        return _this;
    }
    PrismaSchemaBuilder.prototype.missingType = function (typeName) {
        var datamodelInfo = this.getDatamodelInfo();
        var type = datamodelInfo.schema.getType(typeName);
        if (type) {
            return graphqlToNexus_1.graphqlTypeToNexus(this, type, this.config.prisma.client, datamodelInfo);
        }
        return _super.prototype.missingType.call(this, typeName);
    };
    PrismaSchemaBuilder.prototype.getConfig = function () {
        return this.config;
    };
    PrismaSchemaBuilder.prototype.getDatamodelInfo = function () {
        return this.datamodelInfo;
    };
    return PrismaSchemaBuilder;
}(nexus_1.core.SchemaBuilder));
exports.PrismaSchemaBuilder = PrismaSchemaBuilder;
function isPrismaSchemaBuilder(obj) {
    return obj && obj instanceof PrismaSchemaBuilder;
}
exports.isPrismaSchemaBuilder = isPrismaSchemaBuilder;
//# sourceMappingURL=builder.js.map