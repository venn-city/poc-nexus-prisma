import { GraphQLSchema } from 'graphql';
import { core } from 'nexus';
import { PrismaInputObjectTypeConfig } from '../definitions/inputObjectType';
import { AddFieldInput, FilterInputField, InputFieldsWithStar, PickInputField } from '../types';
export interface PrismaInputDefinitionBlock<TypeName extends string> extends core.InputDefinitionBlock<TypeName> {
    prismaFields(inputFields: InputFieldsWithStar<'inputTypes', TypeName>[]): void;
    prismaFields(pickFields: PickInputField<'inputTypes', TypeName>): void;
    prismaFields(filterFields: FilterInputField<'inputTypes', TypeName>): void;
    /**
     * Pick, filter or customize the fields of the underlying input object type
     * @param inputFields The fields you want to pick/filter or customize
     *
     * @example Exposes all fields
     *
     * t.prismaField(['*'])
     *
     * @example Exposes only the `first` and `last` field
     *
     * t.prismaField(['first', 'last'])
     *
     * @example Exposes only the `first` and `last` field (idem-potent with above example)
     *
     * t.prismaFields({ pick: ['first', 'last'] })
     *
     * @example Exposes all fields but the `first` and `last`
     *
     * t.prismaFields({ filter: ['first', 'last'] })
     *
     */
    prismaFields(inputFields: AddFieldInput<'inputTypes', TypeName>): void;
}
export declare function prismaInputDefinitionBlock<TypeName extends string>(typeName: string, t: core.InputDefinitionBlock<TypeName> | core.OutputDefinitionBlock<TypeName>, prismaType: Record<string, core.NexusInputFieldConfig<string, string>>, prismaSchema: GraphQLSchema): PrismaInputDefinitionBlock<TypeName>;
export declare function prismaTypeInputObject(prismaSchema: GraphQLSchema, inputObjectConfig: PrismaInputObjectTypeConfig<any>): Record<string, core.NexusInputFieldConfig<string, string>>;
