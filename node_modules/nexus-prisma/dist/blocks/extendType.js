"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var graphql_1 = require("graphql");
var graphql_2 = require("../graphql");
var objectType_1 = require("../graphqlToNexus/objectType");
var utils_1 = require("../utils");
function prismaExtendTypeBlock(typeName, t, prismaType, prismaSchema) {
    var prismaBlock = t;
    prismaBlock.prismaType = prismaType;
    prismaBlock.prismaFields = function (inputFields) {
        var fields = utils_1.getFields(inputFields, typeName, prismaSchema);
        fields.forEach(function (field) {
            var aliasName = field.alias ? field.alias : field.name;
            var fieldType = graphql_2.findGraphQLTypeField(typeName, field.name, prismaSchema);
            var _a = prismaType[fieldType.name], list = _a.list, rest = __rest(_a, ["list"]);
            var args = utils_1.whitelistArgs(rest.args, field.args);
            prismaBlock.field(aliasName, __assign({}, rest, { type: graphql_2.getTypeName(fieldType.type), list: list ? true : undefined, args: args }));
        });
    };
    return prismaBlock;
}
exports.prismaExtendTypeBlock = prismaExtendTypeBlock;
function prismaTypeExtend(datamodelInfo, objectConfig, builderConfig) {
    var typeName = objectConfig.type;
    var graphqlType = datamodelInfo.schema.getType(typeName);
    if (!graphql_1.isObjectType(graphqlType)) {
        throw new Error("Must select a GraphQLObjectType, saw " + typeName + " which is " + graphqlType);
    }
    return objectType_1.objectTypeFieldsToNexus(graphqlType, builderConfig.prisma.client, datamodelInfo);
}
exports.prismaTypeExtend = prismaTypeExtend;
//# sourceMappingURL=extendType.js.map