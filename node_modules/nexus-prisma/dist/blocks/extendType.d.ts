import { GraphQLSchema } from 'graphql';
import { core } from 'nexus';
import { PrismaExtendTypeConfig } from '../definitions/extendType';
import { AddFieldInput, FilterInputField, InputFieldsWithStar, ObjectTypeDetails, PickInputField, PrismaSchemaConfig, InternalDatamodelInfo } from '../types';
export interface PrismaExtendTypeBlock<TypeName extends string> extends core.OutputDefinitionBlock<TypeName> {
    /**
     * Contains all the options to use native `nexus` methods with `nexus-prisma` generated schema
     *
     * @example Pass in all the options as-is
     * ```
     * prismaExtendType({
     *   name: 'Query',
     *   definition(t) {
     *     t.field(
     *       'users',
     *       t.prismaType.users
     *     )
     *   }
     * })
     * ```
     * @example Use all the options, but overide the resolver
     *
     * ```
     * prismaExtendType({
     *   name: 'Query',
     *   definition(t) {
     *     t.field('users', {
     *       ...t.prismaType.users,
     *       resolve(root, args, ctx) {
     *         // Custom implementation
     *       }
     *     })
     *   }
     * })
     * ```
     * @example Use all the options, add more arguments with a custom resolver
     *
     * ```
     * prismaExtendType({
     *   name: 'Query',
     *   definition(t) {
     *     t.field('users', {
     *       ...t.prismaType.users,
     *       args: {
     *         ...t.prismaType.users.args,
     *         newArg: stringArg()
     *       },
     *       resolve(root, args, ctx) {
     *         // Custom implementation
     *       }
     *     })
     *   }
     * })
     * ```
     */
    prismaType: ObjectTypeDetails<TypeName>;
    prismaFields(inputFields: InputFieldsWithStar<'objectTypes', TypeName>[]): void;
    prismaFields(pickFields: PickInputField<'objectTypes', TypeName>): void;
    prismaFields(filterFields: FilterInputField<'objectTypes', TypeName>): void;
    /**
     * Pick, filter or customize the fields of the underlying object type
     * @param inputFields The fields you want to pick/filter/customize
     *
     * @example Exposes all fields
     *
     * t.prismaField(['*'])
     *
     * @example Exposes only the `id` and `name` field
     *
     * t.prismaField(['id', 'name'])
     *
     * @example Exposes only the `id` and `name` field (idem-potent with above example)
     *
     * t.prismaFields({ pick: ['id', 'name'] })
     *
     * @example Exposes all fields but the `id` and `name`
     *
     * t.prismaFields({ filter: ['id', 'name'] })
     *
     * @example Exposes the only the `users` field, and alias it to `customers`
     *
     * t.prismaFields([{ name: 'users', alias: 'customers' }])
     *
     * @example Exposes only the `users` field, and only the `first` and `last` args
     *
     * t.prismaFields([{ name: 'users', args: ['first', 'last'] }])
     *
     */
    prismaFields(inputFields: AddFieldInput<'objectTypes', TypeName>): void;
}
export declare function prismaExtendTypeBlock<TypeName extends string>(typeName: string, t: core.OutputDefinitionBlock<TypeName>, prismaType: Record<string, core.NexusOutputFieldConfig<string, string>>, prismaSchema: GraphQLSchema): PrismaExtendTypeBlock<TypeName>;
export declare function prismaTypeExtend(datamodelInfo: InternalDatamodelInfo, objectConfig: PrismaExtendTypeConfig<any>, builderConfig: PrismaSchemaConfig): Record<string, core.NexusOutputFieldConfig<string, string>>;
