"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var graphql_1 = require("graphql");
var nexus_1 = require("nexus");
var builder_1 = require("../builder");
function prismaEnumType(typeConfig) {
    return nexus_1.core.nexusWrappedType(typeConfig.name, function (builder) {
        if (!builder_1.isPrismaSchemaBuilder(builder)) {
            throw new Error('prismaEnumType can only be used by `makePrismaSchema`');
        }
        return nexusEnumType(typeConfig, builder);
    });
}
exports.prismaEnumType = prismaEnumType;
function nexusEnumType(typeConfig, builder) {
    var typeName = typeConfig.name;
    var prismaSchema = builder.getDatamodelInfo().schema;
    var graphqlType = prismaSchema.getType(typeName);
    var members = getEnumTypeMembers(typeName, typeConfig.members, graphqlType);
    var description = typeConfig.description
        ? typeConfig.description
        : graphqlType.description;
    return nexus_1.core.enumType({
        name: typeName,
        description: description,
        members: members,
    });
}
function getEnumTypeMembers(typeName, members, graphqlType) {
    if (!graphql_1.isEnumType(graphqlType)) {
        throw new Error("Must select a GraphQLEnumType, saw " + typeName + " which is " + graphqlType);
    }
    return members.map(function (member) {
        var value = graphqlType.getValue(member);
        if (!value) {
            throw new Error("Could not find " + graphqlType.name + "." + member + " in Prisma API");
        }
        return value;
    });
}
exports.getEnumTypeMembers = getEnumTypeMembers;
//# sourceMappingURL=enumType.js.map