"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var nexus_1 = require("nexus");
var extendType_1 = require("../blocks/extendType");
var builder_1 = require("../builder");
/**
 * Extend a previously defined object type. Mainly meant to split the Query/Mutation types in several files if needed.
 */
function prismaExtendType(typeConfig) {
    // @ts-ignore
    return nexus_1.core.nexusWrappedType(typeConfig.type, function (builder) {
        if (!builder_1.isPrismaSchemaBuilder(builder)) {
            throw new Error('prismaExtendType can only be used by `makePrismaSchema`');
        }
        return nexusExtendType(typeConfig, builder);
    });
}
exports.prismaExtendType = prismaExtendType;
function nexusExtendType(typeConfig, builder) {
    var definition = typeConfig.definition, rest = __rest(typeConfig, ["definition"]);
    var datamodelInfo = builder.getDatamodelInfo();
    var prismaType = extendType_1.prismaTypeExtend(datamodelInfo, typeConfig, builder.getConfig());
    var prismaSchema = datamodelInfo.schema;
    return nexus_1.extendType(__assign({}, rest, { definition: function (block) {
            var prismaBlock = extendType_1.prismaExtendTypeBlock(typeConfig.type, block, prismaType, prismaSchema);
            definition(prismaBlock);
        } }));
}
//# sourceMappingURL=extendType.js.map