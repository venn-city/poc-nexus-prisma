"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function throwIfUnknownFields(graphqlType, fields, typeName) {
    var fieldsName = Object.values(graphqlType.getFields()).map(function (f) { return f.name; });
    var unknownFields = fields
        .filter(function (f) { return !fieldsName.includes(f.name); })
        .map(function (f) { return f.name; });
    if (unknownFields.length > 0) {
        throw new Error("Field " + unknownFields.join(', ') + " not found in type " + typeName);
    }
}
exports.throwIfUnknownFields = throwIfUnknownFields;
function throwIfUnknownClientFunction(prismaClient, fieldName, typeName, info) {
    // @ts-ignore
    if (prismaClient[fieldName] === undefined) {
        throw new Error("Unknown prisma-client function for field " + typeName + "." + info.fieldName);
    }
}
exports.throwIfUnknownClientFunction = throwIfUnknownClientFunction;
function throwIfNoUniqFieldName(uniqFieldName, parentName) {
    if (uniqFieldName === undefined) {
        throw new Error("ERROR: No uniq field were found to resolve `" + parentName.fieldName + "`");
    }
}
exports.throwIfNoUniqFieldName = throwIfNoUniqFieldName;
//# sourceMappingURL=throw.js.map