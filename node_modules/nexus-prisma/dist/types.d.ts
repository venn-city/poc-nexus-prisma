import { core } from 'nexus';
import { GetGen, GetGen2, GetGen3, PrismaGenTypesShape, PrismaShapeKeys } from './typesHelpers';
import { GraphQLSchema } from 'graphql';
export declare type PrismaObjectTypeNames = Extract<keyof GetGen2<'objectTypes', 'fields'>, string>;
export declare type PrismaInputObjectTypeNames = Extract<keyof GetGen2<'inputTypes', 'fields'>, string>;
export declare type PrismaEnumTypeNames = Extract<keyof GetGen<'enumTypes', any>, string>;
export declare type PrismaEnumTypeValues<TypeName extends string> = GetGen2<'enumTypes', TypeName>;
export declare type ObjectTypeDetails<TypeName extends string> = GetGen3<'objectTypes', 'fieldsDetails', TypeName>;
declare type InputField<GraphQLType extends PrismaShapeKeys, TypeName extends string> = NexusPrismaGen extends infer GenTypes ? GenTypes extends PrismaGenTypesShape ? GraphQLType extends keyof GenTypes ? 'fields' extends infer Fields ? Fields extends keyof GenTypes[GraphQLType] ? TypeName extends keyof GenTypes[GraphQLType][Fields] ? GenTypes[GraphQLType][Fields][TypeName] : any : any : any : any : any : any;
export declare type InputFieldsWithStar<GraphQLType extends PrismaShapeKeys, TypeName extends string> = ('*' | InputField<GraphQLType, TypeName>)[];
export interface PickInputField<GraphQLType extends PrismaShapeKeys, TypeName extends string> {
    pick: InputFieldsWithStar<GraphQLType, TypeName>;
}
export interface FilterInputField<GraphQLType extends PrismaShapeKeys, TypeName extends string> {
    filter: ((fields: string[]) => string[]) | InputFieldsWithStar<GraphQLType, TypeName>;
}
export declare type AddFieldInput<GraphQLType extends PrismaShapeKeys, TypeName extends string> = InputFieldsWithStar<GraphQLType, TypeName> | PickInputField<GraphQLType, TypeName> | FilterInputField<GraphQLType, TypeName>;
export declare type ObjectField = {
    name: string;
    args?: string[] | false;
    alias?: string;
};
export declare type AnonymousField = '*' | string | ObjectField;
export interface PrismaClient {
    $exists: any;
    $graphql: <T = any>(query: string, variables?: {
        [key: string]: any;
    }) => Promise<T>;
    [key: string]: any;
}
export declare type PrismaClientInput = PrismaClient | ((ctx: core.GetGen<'context'>) => PrismaClient);
export interface DatamodelInfo {
    uniqueFieldsByModel: Record<string, string[]>;
    embeddedTypes: string[];
    clientPath: string;
    schema: {
        __schema: any;
    };
}
export interface InternalDatamodelInfo extends core.Omit<DatamodelInfo, 'schema'> {
    schema: GraphQLSchema;
}
export interface PrismaOptions {
    /**
     * The default exported object generated by `nexus-prisma-generate`
     *
     * Import it from the output directory generated by `nexus-prisma-generate`
     * @example
     * ```
     * import datamodelInfo from './generated/nexus-prisma'
     *
     * makePrismaSchema({
     *   prisma: {
     *     datamodelInfo
     *   }
     * })
     * ```
     */
    datamodelInfo: DatamodelInfo;
    /**
     * The instance of the prisma-client, either passed statically
     * or returned from the context defined in your GraphQL server
     *
     * @example
     * ```
     * import { prisma } from './prisma-client'
     *
     * makePrismaSchem({
     *   prisma: {
     *     client: prisma // or client: ctx => ctx.prisma
     *   }
     * })
     * ```
     */
    client: PrismaClientInput;
}
export interface PrismaSchemaConfig extends core.BuilderConfig {
    types?: any;
    prisma: PrismaOptions;
}
export {};
