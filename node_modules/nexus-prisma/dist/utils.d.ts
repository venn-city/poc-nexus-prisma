import { GraphQLField, GraphQLSchema } from 'graphql';
import { core } from 'nexus';
import { AddFieldInput, AnonymousField, ObjectField } from './types';
export declare function getAllFields(typeName: string, schema: GraphQLSchema): ObjectField[];
export declare function getFields<TypeName extends string>(inputFields: AddFieldInput<'objectTypes' | 'inputTypes', TypeName>, typeName: string, schema: GraphQLSchema): ObjectField[];
export declare function normalizeFields(fields: AnonymousField[]): ObjectField[];
export declare function isDeleteMutation(typeName: string, fieldName: string): boolean;
export declare function isCreateMutation(typeName: string, fieldName: string): boolean;
export declare function isNotArrayOrConnectionType(fieldToResolve: GraphQLField<any, any>): boolean;
export declare function isConnectionTypeName(typeName: string): boolean;
export declare function isSubscriptionType(typeName: string): boolean;
export declare function flatMap<T, U>(array: T[], callbackfn: (value: T, index: number, array: T[]) => U[]): U[];
export declare function whitelistArgs(args: Record<string, core.NexusArgDef<string>>, whitelist: string[] | false | undefined): Record<string, core.NexusArgDef<string>> | undefined;
