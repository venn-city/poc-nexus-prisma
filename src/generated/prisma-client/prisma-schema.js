module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.1). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateBill {
  count: Int!
}

type AggregateTransaction {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Bill {
  id: ID!
  user: User!
  billableFromDate: DateTime!
  startDate: DateTime!
  endDate: DateTime!
  isPeriodic: Boolean!
  transactions(where: TransactionWhereInput, orderBy: TransactionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Transaction!]
  status: BillStatus
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
}

type BillConnection {
  pageInfo: PageInfo!
  edges: [BillEdge]!
  aggregate: AggregateBill!
}

input BillCreateInput {
  id: ID
  user: UserCreateOneInput!
  billableFromDate: DateTime!
  startDate: DateTime!
  endDate: DateTime!
  isPeriodic: Boolean
  transactions: TransactionCreateManyWithoutBillInput
  status: BillStatus
  deletedAt: DateTime
}

input BillCreateOneWithoutTransactionsInput {
  create: BillCreateWithoutTransactionsInput
  connect: BillWhereUniqueInput
}

input BillCreateWithoutTransactionsInput {
  id: ID
  user: UserCreateOneInput!
  billableFromDate: DateTime!
  startDate: DateTime!
  endDate: DateTime!
  isPeriodic: Boolean
  status: BillStatus
  deletedAt: DateTime
}

type BillEdge {
  node: Bill!
  cursor: String!
}

enum BillOrderByInput {
  id_ASC
  id_DESC
  billableFromDate_ASC
  billableFromDate_DESC
  startDate_ASC
  startDate_DESC
  endDate_ASC
  endDate_DESC
  isPeriodic_ASC
  isPeriodic_DESC
  status_ASC
  status_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
}

type BillPreviousValues {
  id: ID!
  billableFromDate: DateTime!
  startDate: DateTime!
  endDate: DateTime!
  isPeriodic: Boolean!
  status: BillStatus
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
}

enum BillStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
  DONE
}

type BillSubscriptionPayload {
  mutation: MutationType!
  node: Bill
  updatedFields: [String!]
  previousValues: BillPreviousValues
}

input BillSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BillWhereInput
  AND: [BillSubscriptionWhereInput!]
  OR: [BillSubscriptionWhereInput!]
  NOT: [BillSubscriptionWhereInput!]
}

input BillUpdateInput {
  user: UserUpdateOneRequiredInput
  billableFromDate: DateTime
  startDate: DateTime
  endDate: DateTime
  isPeriodic: Boolean
  transactions: TransactionUpdateManyWithoutBillInput
  status: BillStatus
  deletedAt: DateTime
}

input BillUpdateManyMutationInput {
  billableFromDate: DateTime
  startDate: DateTime
  endDate: DateTime
  isPeriodic: Boolean
  status: BillStatus
  deletedAt: DateTime
}

input BillUpdateOneWithoutTransactionsInput {
  create: BillCreateWithoutTransactionsInput
  update: BillUpdateWithoutTransactionsDataInput
  upsert: BillUpsertWithoutTransactionsInput
  delete: Boolean
  disconnect: Boolean
  connect: BillWhereUniqueInput
}

input BillUpdateWithoutTransactionsDataInput {
  user: UserUpdateOneRequiredInput
  billableFromDate: DateTime
  startDate: DateTime
  endDate: DateTime
  isPeriodic: Boolean
  status: BillStatus
  deletedAt: DateTime
}

input BillUpsertWithoutTransactionsInput {
  update: BillUpdateWithoutTransactionsDataInput!
  create: BillCreateWithoutTransactionsInput!
}

input BillWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: UserWhereInput
  billableFromDate: DateTime
  billableFromDate_not: DateTime
  billableFromDate_in: [DateTime!]
  billableFromDate_not_in: [DateTime!]
  billableFromDate_lt: DateTime
  billableFromDate_lte: DateTime
  billableFromDate_gt: DateTime
  billableFromDate_gte: DateTime
  startDate: DateTime
  startDate_not: DateTime
  startDate_in: [DateTime!]
  startDate_not_in: [DateTime!]
  startDate_lt: DateTime
  startDate_lte: DateTime
  startDate_gt: DateTime
  startDate_gte: DateTime
  endDate: DateTime
  endDate_not: DateTime
  endDate_in: [DateTime!]
  endDate_not_in: [DateTime!]
  endDate_lt: DateTime
  endDate_lte: DateTime
  endDate_gt: DateTime
  endDate_gte: DateTime
  isPeriodic: Boolean
  isPeriodic_not: Boolean
  transactions_every: TransactionWhereInput
  transactions_some: TransactionWhereInput
  transactions_none: TransactionWhereInput
  status: BillStatus
  status_not: BillStatus
  status_in: [BillStatus!]
  status_not_in: [BillStatus!]
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  deletedAt: DateTime
  deletedAt_not: DateTime
  deletedAt_in: [DateTime!]
  deletedAt_not_in: [DateTime!]
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  AND: [BillWhereInput!]
  OR: [BillWhereInput!]
  NOT: [BillWhereInput!]
}

input BillWhereUniqueInput {
  id: ID
}

scalar DateTime

scalar Json

scalar Long

type Mutation {
  createBill(data: BillCreateInput!): Bill!
  updateBill(data: BillUpdateInput!, where: BillWhereUniqueInput!): Bill
  updateManyBills(data: BillUpdateManyMutationInput!, where: BillWhereInput): BatchPayload!
  upsertBill(where: BillWhereUniqueInput!, create: BillCreateInput!, update: BillUpdateInput!): Bill!
  deleteBill(where: BillWhereUniqueInput!): Bill
  deleteManyBills(where: BillWhereInput): BatchPayload!
  createTransaction(data: TransactionCreateInput!): Transaction!
  updateTransaction(data: TransactionUpdateInput!, where: TransactionWhereUniqueInput!): Transaction
  updateManyTransactions(data: TransactionUpdateManyMutationInput!, where: TransactionWhereInput): BatchPayload!
  upsertTransaction(where: TransactionWhereUniqueInput!, create: TransactionCreateInput!, update: TransactionUpdateInput!): Transaction!
  deleteTransaction(where: TransactionWhereUniqueInput!): Transaction
  deleteManyTransactions(where: TransactionWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  bill(where: BillWhereUniqueInput!): Bill
  bills(where: BillWhereInput, orderBy: BillOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Bill]!
  billsConnection(where: BillWhereInput, orderBy: BillOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BillConnection!
  transaction(where: TransactionWhereUniqueInput!): Transaction
  transactions(where: TransactionWhereInput, orderBy: TransactionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Transaction]!
  transactionsConnection(where: TransactionWhereInput, orderBy: TransactionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TransactionConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  bill(where: BillSubscriptionWhereInput): BillSubscriptionPayload
  transaction(where: TransactionSubscriptionWhereInput): TransactionSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type Transaction {
  id: ID!
  user: User!
  amount: Float!
  bill: Bill
  billableFromDate: DateTime!
  startDate: DateTime!
  endDate: DateTime!
  isPartOfPeriodicBill: Boolean!
  description: String
  metadata: Json
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
}

type TransactionConnection {
  pageInfo: PageInfo!
  edges: [TransactionEdge]!
  aggregate: AggregateTransaction!
}

input TransactionCreateInput {
  id: ID
  user: UserCreateOneInput!
  amount: Float!
  bill: BillCreateOneWithoutTransactionsInput
  billableFromDate: DateTime!
  startDate: DateTime!
  endDate: DateTime!
  isPartOfPeriodicBill: Boolean
  description: String
  metadata: Json
  deletedAt: DateTime
}

input TransactionCreateManyWithoutBillInput {
  create: [TransactionCreateWithoutBillInput!]
  connect: [TransactionWhereUniqueInput!]
}

input TransactionCreateWithoutBillInput {
  id: ID
  user: UserCreateOneInput!
  amount: Float!
  billableFromDate: DateTime!
  startDate: DateTime!
  endDate: DateTime!
  isPartOfPeriodicBill: Boolean
  description: String
  metadata: Json
  deletedAt: DateTime
}

type TransactionEdge {
  node: Transaction!
  cursor: String!
}

enum TransactionOrderByInput {
  id_ASC
  id_DESC
  amount_ASC
  amount_DESC
  billableFromDate_ASC
  billableFromDate_DESC
  startDate_ASC
  startDate_DESC
  endDate_ASC
  endDate_DESC
  isPartOfPeriodicBill_ASC
  isPartOfPeriodicBill_DESC
  description_ASC
  description_DESC
  metadata_ASC
  metadata_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
}

type TransactionPreviousValues {
  id: ID!
  amount: Float!
  billableFromDate: DateTime!
  startDate: DateTime!
  endDate: DateTime!
  isPartOfPeriodicBill: Boolean!
  description: String
  metadata: Json
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
}

input TransactionScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  amount: Float
  amount_not: Float
  amount_in: [Float!]
  amount_not_in: [Float!]
  amount_lt: Float
  amount_lte: Float
  amount_gt: Float
  amount_gte: Float
  billableFromDate: DateTime
  billableFromDate_not: DateTime
  billableFromDate_in: [DateTime!]
  billableFromDate_not_in: [DateTime!]
  billableFromDate_lt: DateTime
  billableFromDate_lte: DateTime
  billableFromDate_gt: DateTime
  billableFromDate_gte: DateTime
  startDate: DateTime
  startDate_not: DateTime
  startDate_in: [DateTime!]
  startDate_not_in: [DateTime!]
  startDate_lt: DateTime
  startDate_lte: DateTime
  startDate_gt: DateTime
  startDate_gte: DateTime
  endDate: DateTime
  endDate_not: DateTime
  endDate_in: [DateTime!]
  endDate_not_in: [DateTime!]
  endDate_lt: DateTime
  endDate_lte: DateTime
  endDate_gt: DateTime
  endDate_gte: DateTime
  isPartOfPeriodicBill: Boolean
  isPartOfPeriodicBill_not: Boolean
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  deletedAt: DateTime
  deletedAt_not: DateTime
  deletedAt_in: [DateTime!]
  deletedAt_not_in: [DateTime!]
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  AND: [TransactionScalarWhereInput!]
  OR: [TransactionScalarWhereInput!]
  NOT: [TransactionScalarWhereInput!]
}

type TransactionSubscriptionPayload {
  mutation: MutationType!
  node: Transaction
  updatedFields: [String!]
  previousValues: TransactionPreviousValues
}

input TransactionSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TransactionWhereInput
  AND: [TransactionSubscriptionWhereInput!]
  OR: [TransactionSubscriptionWhereInput!]
  NOT: [TransactionSubscriptionWhereInput!]
}

input TransactionUpdateInput {
  user: UserUpdateOneRequiredInput
  amount: Float
  bill: BillUpdateOneWithoutTransactionsInput
  billableFromDate: DateTime
  startDate: DateTime
  endDate: DateTime
  isPartOfPeriodicBill: Boolean
  description: String
  metadata: Json
  deletedAt: DateTime
}

input TransactionUpdateManyDataInput {
  amount: Float
  billableFromDate: DateTime
  startDate: DateTime
  endDate: DateTime
  isPartOfPeriodicBill: Boolean
  description: String
  metadata: Json
  deletedAt: DateTime
}

input TransactionUpdateManyMutationInput {
  amount: Float
  billableFromDate: DateTime
  startDate: DateTime
  endDate: DateTime
  isPartOfPeriodicBill: Boolean
  description: String
  metadata: Json
  deletedAt: DateTime
}

input TransactionUpdateManyWithoutBillInput {
  create: [TransactionCreateWithoutBillInput!]
  delete: [TransactionWhereUniqueInput!]
  connect: [TransactionWhereUniqueInput!]
  set: [TransactionWhereUniqueInput!]
  disconnect: [TransactionWhereUniqueInput!]
  update: [TransactionUpdateWithWhereUniqueWithoutBillInput!]
  upsert: [TransactionUpsertWithWhereUniqueWithoutBillInput!]
  deleteMany: [TransactionScalarWhereInput!]
  updateMany: [TransactionUpdateManyWithWhereNestedInput!]
}

input TransactionUpdateManyWithWhereNestedInput {
  where: TransactionScalarWhereInput!
  data: TransactionUpdateManyDataInput!
}

input TransactionUpdateWithoutBillDataInput {
  user: UserUpdateOneRequiredInput
  amount: Float
  billableFromDate: DateTime
  startDate: DateTime
  endDate: DateTime
  isPartOfPeriodicBill: Boolean
  description: String
  metadata: Json
  deletedAt: DateTime
}

input TransactionUpdateWithWhereUniqueWithoutBillInput {
  where: TransactionWhereUniqueInput!
  data: TransactionUpdateWithoutBillDataInput!
}

input TransactionUpsertWithWhereUniqueWithoutBillInput {
  where: TransactionWhereUniqueInput!
  update: TransactionUpdateWithoutBillDataInput!
  create: TransactionCreateWithoutBillInput!
}

input TransactionWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: UserWhereInput
  amount: Float
  amount_not: Float
  amount_in: [Float!]
  amount_not_in: [Float!]
  amount_lt: Float
  amount_lte: Float
  amount_gt: Float
  amount_gte: Float
  bill: BillWhereInput
  billableFromDate: DateTime
  billableFromDate_not: DateTime
  billableFromDate_in: [DateTime!]
  billableFromDate_not_in: [DateTime!]
  billableFromDate_lt: DateTime
  billableFromDate_lte: DateTime
  billableFromDate_gt: DateTime
  billableFromDate_gte: DateTime
  startDate: DateTime
  startDate_not: DateTime
  startDate_in: [DateTime!]
  startDate_not_in: [DateTime!]
  startDate_lt: DateTime
  startDate_lte: DateTime
  startDate_gt: DateTime
  startDate_gte: DateTime
  endDate: DateTime
  endDate_not: DateTime
  endDate_in: [DateTime!]
  endDate_not_in: [DateTime!]
  endDate_lt: DateTime
  endDate_lte: DateTime
  endDate_gt: DateTime
  endDate_gte: DateTime
  isPartOfPeriodicBill: Boolean
  isPartOfPeriodicBill_not: Boolean
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  deletedAt: DateTime
  deletedAt_not: DateTime
  deletedAt_in: [DateTime!]
  deletedAt_not_in: [DateTime!]
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  AND: [TransactionWhereInput!]
  OR: [TransactionWhereInput!]
  NOT: [TransactionWhereInput!]
}

input TransactionWhereUniqueInput {
  id: ID
}

type User {
  id: ID!
  email: String!
  firstName: String!
  middleName: String
  lastName: String!
  socialSecurityNumber: String
  comment: String
  metadata: Json
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  email: String!
  firstName: String!
  middleName: String
  lastName: String!
  socialSecurityNumber: String
  comment: String
  metadata: Json
  deletedAt: DateTime
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  firstName_ASC
  firstName_DESC
  middleName_ASC
  middleName_DESC
  lastName_ASC
  lastName_DESC
  socialSecurityNumber_ASC
  socialSecurityNumber_DESC
  comment_ASC
  comment_DESC
  metadata_ASC
  metadata_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  firstName: String!
  middleName: String
  lastName: String!
  socialSecurityNumber: String
  comment: String
  metadata: Json
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  email: String
  firstName: String
  middleName: String
  lastName: String
  socialSecurityNumber: String
  comment: String
  metadata: Json
  deletedAt: DateTime
}

input UserUpdateInput {
  email: String
  firstName: String
  middleName: String
  lastName: String
  socialSecurityNumber: String
  comment: String
  metadata: Json
  deletedAt: DateTime
}

input UserUpdateManyMutationInput {
  email: String
  firstName: String
  middleName: String
  lastName: String
  socialSecurityNumber: String
  comment: String
  metadata: Json
  deletedAt: DateTime
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  connect: UserWhereUniqueInput
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_gt: String
  firstName_gte: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  middleName: String
  middleName_not: String
  middleName_in: [String!]
  middleName_not_in: [String!]
  middleName_lt: String
  middleName_lte: String
  middleName_gt: String
  middleName_gte: String
  middleName_contains: String
  middleName_not_contains: String
  middleName_starts_with: String
  middleName_not_starts_with: String
  middleName_ends_with: String
  middleName_not_ends_with: String
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  socialSecurityNumber: String
  socialSecurityNumber_not: String
  socialSecurityNumber_in: [String!]
  socialSecurityNumber_not_in: [String!]
  socialSecurityNumber_lt: String
  socialSecurityNumber_lte: String
  socialSecurityNumber_gt: String
  socialSecurityNumber_gte: String
  socialSecurityNumber_contains: String
  socialSecurityNumber_not_contains: String
  socialSecurityNumber_starts_with: String
  socialSecurityNumber_not_starts_with: String
  socialSecurityNumber_ends_with: String
  socialSecurityNumber_not_ends_with: String
  comment: String
  comment_not: String
  comment_in: [String!]
  comment_not_in: [String!]
  comment_lt: String
  comment_lte: String
  comment_gt: String
  comment_gte: String
  comment_contains: String
  comment_not_contains: String
  comment_starts_with: String
  comment_not_starts_with: String
  comment_ends_with: String
  comment_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  deletedAt: DateTime
  deletedAt_not: DateTime
  deletedAt_in: [DateTime!]
  deletedAt_not_in: [DateTime!]
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`
      }
    