### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type AggregateBill {
  count: Int!
}

type AggregateTransaction {
  count: Int!
}

type Bill {
  billableFromDate: DateTime!
  createdAt: DateTime!
  deletedAt: DateTime
  endDate: DateTime!
  id: ID!
  isPeriodic: Boolean!
  startDate: DateTime!
  status: BillStatus
  transactions(after: String, before: String, first: Int, last: Int, orderBy: TransactionOrderByInput, skip: Int, where: TransactionWhereInput): [Transaction!]
  updatedAt: DateTime!
  user: User!
}

type BillConnection {
  aggregate: AggregateBill!
  edges: [BillEdge!]!
  pageInfo: PageInfo!
}

type BillEdge {
  cursor: String!
  node: Bill!
}

enum BillOrderByInput {
  billableFromDate_ASC
  billableFromDate_DESC
  createdAt_ASC
  createdAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  endDate_ASC
  endDate_DESC
  id_ASC
  id_DESC
  isPeriodic_ASC
  isPeriodic_DESC
  startDate_ASC
  startDate_DESC
  status_ASC
  status_DESC
  updatedAt_ASC
  updatedAt_DESC
}

enum BillStatus {
  APPROVED
  CANCELLED
  DONE
  PENDING
  REJECTED
}

input BillWhereInput {
  AND: [BillWhereInput!]
  billableFromDate: DateTime
  billableFromDate_gt: DateTime
  billableFromDate_gte: DateTime
  billableFromDate_in: [DateTime!]
  billableFromDate_lt: DateTime
  billableFromDate_lte: DateTime
  billableFromDate_not: DateTime
  billableFromDate_not_in: [DateTime!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  deletedAt: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedAt_in: [DateTime!]
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_not: DateTime
  deletedAt_not_in: [DateTime!]
  endDate: DateTime
  endDate_gt: DateTime
  endDate_gte: DateTime
  endDate_in: [DateTime!]
  endDate_lt: DateTime
  endDate_lte: DateTime
  endDate_not: DateTime
  endDate_not_in: [DateTime!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  isPeriodic: Boolean
  isPeriodic_not: Boolean
  NOT: [BillWhereInput!]
  OR: [BillWhereInput!]
  startDate: DateTime
  startDate_gt: DateTime
  startDate_gte: DateTime
  startDate_in: [DateTime!]
  startDate_lt: DateTime
  startDate_lte: DateTime
  startDate_not: DateTime
  startDate_not_in: [DateTime!]
  status: BillStatus
  status_in: [BillStatus!]
  status_not: BillStatus
  status_not_in: [BillStatus!]
  transactions_every: TransactionWhereInput
  transactions_none: TransactionWhereInput
  transactions_some: TransactionWhereInput
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
  user: UserWhereInput
}

input BillWhereUniqueInput {
  id: ID
}

scalar DateTime

scalar Json

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Query {
  bill(where: BillWhereUniqueInput!): Bill
  bills(after: String, before: String, first: Int, last: Int, orderBy: BillOrderByInput, skip: Int, where: BillWhereInput): BillConnection!
  findDebo(after: String, before: String, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): [User!]!
  transaction(where: TransactionWhereUniqueInput!): Transaction
  transactions(after: String, before: String, first: Int, last: Int, orderBy: TransactionOrderByInput, skip: Int, where: TransactionWhereInput): TransactionConnection!
  user(where: UserWhereUniqueInput!): User
}

type Transaction {
  amount: Float!
  bill: Bill
  billableFromDate: DateTime!
  createdAt: DateTime!
  deletedAt: DateTime
  description: String
  endDate: DateTime!
  id: ID!
  isPartOfPeriodicBill: Boolean!
  metadata: Json
  startDate: DateTime!
  updatedAt: DateTime!
  user: User!
}

type TransactionConnection {
  aggregate: AggregateTransaction!
  edges: [TransactionEdge!]!
  pageInfo: PageInfo!
}

type TransactionEdge {
  cursor: String!
  node: Transaction!
}

enum TransactionOrderByInput {
  amount_ASC
  amount_DESC
  billableFromDate_ASC
  billableFromDate_DESC
  createdAt_ASC
  createdAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  description_ASC
  description_DESC
  endDate_ASC
  endDate_DESC
  id_ASC
  id_DESC
  isPartOfPeriodicBill_ASC
  isPartOfPeriodicBill_DESC
  metadata_ASC
  metadata_DESC
  startDate_ASC
  startDate_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input TransactionWhereInput {
  amount: Float
  amount_gt: Float
  amount_gte: Float
  amount_in: [Float!]
  amount_lt: Float
  amount_lte: Float
  amount_not: Float
  amount_not_in: [Float!]
  AND: [TransactionWhereInput!]
  bill: BillWhereInput
  billableFromDate: DateTime
  billableFromDate_gt: DateTime
  billableFromDate_gte: DateTime
  billableFromDate_in: [DateTime!]
  billableFromDate_lt: DateTime
  billableFromDate_lte: DateTime
  billableFromDate_not: DateTime
  billableFromDate_not_in: [DateTime!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  deletedAt: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedAt_in: [DateTime!]
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_not: DateTime
  deletedAt_not_in: [DateTime!]
  description: String
  description_contains: String
  description_ends_with: String
  description_gt: String
  description_gte: String
  description_in: [String!]
  description_lt: String
  description_lte: String
  description_not: String
  description_not_contains: String
  description_not_ends_with: String
  description_not_in: [String!]
  description_not_starts_with: String
  description_starts_with: String
  endDate: DateTime
  endDate_gt: DateTime
  endDate_gte: DateTime
  endDate_in: [DateTime!]
  endDate_lt: DateTime
  endDate_lte: DateTime
  endDate_not: DateTime
  endDate_not_in: [DateTime!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  isPartOfPeriodicBill: Boolean
  isPartOfPeriodicBill_not: Boolean
  NOT: [TransactionWhereInput!]
  OR: [TransactionWhereInput!]
  startDate: DateTime
  startDate_gt: DateTime
  startDate_gte: DateTime
  startDate_in: [DateTime!]
  startDate_lt: DateTime
  startDate_lte: DateTime
  startDate_not: DateTime
  startDate_not_in: [DateTime!]
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
  user: UserWhereInput
}

input TransactionWhereUniqueInput {
  id: ID
}

type User {
  comment: String
  createdAt: DateTime!
  deletedAt: DateTime
  email: String!
  firstName: String!
  id: ID!
  lastName: String!
  metadata: Json
  middleName: String
  socialSecurityNumber: String
  updatedAt: DateTime!
}

enum UserOrderByInput {
  comment_ASC
  comment_DESC
  createdAt_ASC
  createdAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  email_ASC
  email_DESC
  firstName_ASC
  firstName_DESC
  id_ASC
  id_DESC
  lastName_ASC
  lastName_DESC
  metadata_ASC
  metadata_DESC
  middleName_ASC
  middleName_DESC
  socialSecurityNumber_ASC
  socialSecurityNumber_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input UserWhereInput {
  AND: [UserWhereInput!]
  comment: String
  comment_contains: String
  comment_ends_with: String
  comment_gt: String
  comment_gte: String
  comment_in: [String!]
  comment_lt: String
  comment_lte: String
  comment_not: String
  comment_not_contains: String
  comment_not_ends_with: String
  comment_not_in: [String!]
  comment_not_starts_with: String
  comment_starts_with: String
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  deletedAt: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedAt_in: [DateTime!]
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_not: DateTime
  deletedAt_not_in: [DateTime!]
  email: String
  email_contains: String
  email_ends_with: String
  email_gt: String
  email_gte: String
  email_in: [String!]
  email_lt: String
  email_lte: String
  email_not: String
  email_not_contains: String
  email_not_ends_with: String
  email_not_in: [String!]
  email_not_starts_with: String
  email_starts_with: String
  firstName: String
  firstName_contains: String
  firstName_ends_with: String
  firstName_gt: String
  firstName_gte: String
  firstName_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_not: String
  firstName_not_contains: String
  firstName_not_ends_with: String
  firstName_not_in: [String!]
  firstName_not_starts_with: String
  firstName_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  lastName: String
  lastName_contains: String
  lastName_ends_with: String
  lastName_gt: String
  lastName_gte: String
  lastName_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_not: String
  lastName_not_contains: String
  lastName_not_ends_with: String
  lastName_not_in: [String!]
  lastName_not_starts_with: String
  lastName_starts_with: String
  middleName: String
  middleName_contains: String
  middleName_ends_with: String
  middleName_gt: String
  middleName_gte: String
  middleName_in: [String!]
  middleName_lt: String
  middleName_lte: String
  middleName_not: String
  middleName_not_contains: String
  middleName_not_ends_with: String
  middleName_not_in: [String!]
  middleName_not_starts_with: String
  middleName_starts_with: String
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  socialSecurityNumber: String
  socialSecurityNumber_contains: String
  socialSecurityNumber_ends_with: String
  socialSecurityNumber_gt: String
  socialSecurityNumber_gte: String
  socialSecurityNumber_in: [String!]
  socialSecurityNumber_lt: String
  socialSecurityNumber_lte: String
  socialSecurityNumber_not: String
  socialSecurityNumber_not_contains: String
  socialSecurityNumber_not_ends_with: String
  socialSecurityNumber_not_in: [String!]
  socialSecurityNumber_not_starts_with: String
  socialSecurityNumber_starts_with: String
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input UserWhereUniqueInput {
  email: String
  id: ID
}
