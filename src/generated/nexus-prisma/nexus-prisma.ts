/**
 * This file was automatically generated by nexus-prisma@0.3.7
 * Do not make changes to this file directly
 */

import { core } from 'nexus'
import { GraphQLResolveInfo } from 'graphql'
import * as prisma from '../prisma-client'

declare global {
  interface NexusPrismaGen extends NexusPrismaTypes {}
}

export interface NexusPrismaTypes {
  objectTypes: {
    fields: {
      Query: QueryObject
      User: UserObject
      UserConnection: UserConnectionObject
      PageInfo: PageInfoObject
      UserEdge: UserEdgeObject
      AggregateUser: AggregateUserObject
      Transaction: TransactionObject
      Bill: BillObject
      TransactionConnection: TransactionConnectionObject
      TransactionEdge: TransactionEdgeObject
      AggregateTransaction: AggregateTransactionObject
      BillConnection: BillConnectionObject
      BillEdge: BillEdgeObject
      AggregateBill: AggregateBillObject
      Mutation: MutationObject
      BatchPayload: BatchPayloadObject
      Subscription: SubscriptionObject
      UserSubscriptionPayload: UserSubscriptionPayloadObject
      UserPreviousValues: UserPreviousValuesObject
      TransactionSubscriptionPayload: TransactionSubscriptionPayloadObject
      TransactionPreviousValues: TransactionPreviousValuesObject
      BillSubscriptionPayload: BillSubscriptionPayloadObject
      BillPreviousValues: BillPreviousValuesObject
    }
    fieldsDetails: {
      Query: QueryFieldDetails
      User: UserFieldDetails
      UserConnection: UserConnectionFieldDetails
      PageInfo: PageInfoFieldDetails
      UserEdge: UserEdgeFieldDetails
      AggregateUser: AggregateUserFieldDetails
      Transaction: TransactionFieldDetails
      Bill: BillFieldDetails
      TransactionConnection: TransactionConnectionFieldDetails
      TransactionEdge: TransactionEdgeFieldDetails
      AggregateTransaction: AggregateTransactionFieldDetails
      BillConnection: BillConnectionFieldDetails
      BillEdge: BillEdgeFieldDetails
      AggregateBill: AggregateBillFieldDetails
      Mutation: MutationFieldDetails
      BatchPayload: BatchPayloadFieldDetails
      Subscription: SubscriptionFieldDetails
      UserSubscriptionPayload: UserSubscriptionPayloadFieldDetails
      UserPreviousValues: UserPreviousValuesFieldDetails
      TransactionSubscriptionPayload: TransactionSubscriptionPayloadFieldDetails
      TransactionPreviousValues: TransactionPreviousValuesFieldDetails
      BillSubscriptionPayload: BillSubscriptionPayloadFieldDetails
      BillPreviousValues: BillPreviousValuesFieldDetails
    }
  }
  inputTypes: {
    fields: {
      UserWhereUniqueInput: UserWhereUniqueInputInputObject
      UserWhereInput: UserWhereInputInputObject
      TransactionWhereUniqueInput: TransactionWhereUniqueInputInputObject
      TransactionWhereInput: TransactionWhereInputInputObject
      BillWhereInput: BillWhereInputInputObject
      BillWhereUniqueInput: BillWhereUniqueInputInputObject
      UserCreateInput: UserCreateInputInputObject
      UserUpdateInput: UserUpdateInputInputObject
      UserUpdateManyMutationInput: UserUpdateManyMutationInputInputObject
      TransactionCreateInput: TransactionCreateInputInputObject
      UserCreateOneInput: UserCreateOneInputInputObject
      BillCreateOneWithoutTransactionsInput: BillCreateOneWithoutTransactionsInputInputObject
      BillCreateWithoutTransactionsInput: BillCreateWithoutTransactionsInputInputObject
      TransactionUpdateInput: TransactionUpdateInputInputObject
      UserUpdateOneRequiredInput: UserUpdateOneRequiredInputInputObject
      UserUpdateDataInput: UserUpdateDataInputInputObject
      UserUpsertNestedInput: UserUpsertNestedInputInputObject
      BillUpdateOneWithoutTransactionsInput: BillUpdateOneWithoutTransactionsInputInputObject
      BillUpdateWithoutTransactionsDataInput: BillUpdateWithoutTransactionsDataInputInputObject
      BillUpsertWithoutTransactionsInput: BillUpsertWithoutTransactionsInputInputObject
      TransactionUpdateManyMutationInput: TransactionUpdateManyMutationInputInputObject
      BillCreateInput: BillCreateInputInputObject
      TransactionCreateManyWithoutBillInput: TransactionCreateManyWithoutBillInputInputObject
      TransactionCreateWithoutBillInput: TransactionCreateWithoutBillInputInputObject
      BillUpdateInput: BillUpdateInputInputObject
      TransactionUpdateManyWithoutBillInput: TransactionUpdateManyWithoutBillInputInputObject
      TransactionUpdateWithWhereUniqueWithoutBillInput: TransactionUpdateWithWhereUniqueWithoutBillInputInputObject
      TransactionUpdateWithoutBillDataInput: TransactionUpdateWithoutBillDataInputInputObject
      TransactionUpsertWithWhereUniqueWithoutBillInput: TransactionUpsertWithWhereUniqueWithoutBillInputInputObject
      TransactionScalarWhereInput: TransactionScalarWhereInputInputObject
      TransactionUpdateManyWithWhereNestedInput: TransactionUpdateManyWithWhereNestedInputInputObject
      TransactionUpdateManyDataInput: TransactionUpdateManyDataInputInputObject
      BillUpdateManyMutationInput: BillUpdateManyMutationInputInputObject
      UserSubscriptionWhereInput: UserSubscriptionWhereInputInputObject
      TransactionSubscriptionWhereInput: TransactionSubscriptionWhereInputInputObject
      BillSubscriptionWhereInput: BillSubscriptionWhereInputInputObject
    }
  }
  enumTypes: {
    UserOrderByInput: UserOrderByInputValues,
    BillStatus: BillStatusValues,
    TransactionOrderByInput: TransactionOrderByInputValues,
    BillOrderByInput: BillOrderByInputValues,
    MutationType: MutationTypeValues,
  }
}

// Types for Query

type QueryObject =
  | QueryFields
  | { name: 'user', args?: QueryUserArgs[] | false, alias?: string  } 
  | { name: 'users', args?: QueryUsersArgs[] | false, alias?: string  } 
  | { name: 'usersConnection', args?: QueryUsersConnectionArgs[] | false, alias?: string  } 
  | { name: 'transaction', args?: QueryTransactionArgs[] | false, alias?: string  } 
  | { name: 'transactions', args?: QueryTransactionsArgs[] | false, alias?: string  } 
  | { name: 'transactionsConnection', args?: QueryTransactionsConnectionArgs[] | false, alias?: string  } 
  | { name: 'bill', args?: QueryBillArgs[] | false, alias?: string  } 
  | { name: 'bills', args?: QueryBillsArgs[] | false, alias?: string  } 
  | { name: 'billsConnection', args?: QueryBillsConnectionArgs[] | false, alias?: string  } 

type QueryFields =
  | 'user'
  | 'users'
  | 'usersConnection'
  | 'transaction'
  | 'transactions'
  | 'transactionsConnection'
  | 'bill'
  | 'bills'
  | 'billsConnection'


type QueryUserArgs =
  | 'where'
type QueryUsersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryUsersConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryTransactionArgs =
  | 'where'
type QueryTransactionsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryTransactionsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryBillArgs =
  | 'where'
type QueryBillsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryBillsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface QueryFieldDetails {
  user: {
    type: 'User'
    args: Record<QueryUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  users: {
    type: 'User'
    args: Record<QueryUsersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User[]> | prisma.User[]
  }
  usersConnection: {
    type: 'UserConnection'
    args: Record<QueryUsersConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserConnection> | prisma.UserConnection
  }
  transaction: {
    type: 'Transaction'
    args: Record<QueryTransactionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: TransactionWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Transaction | null> | prisma.Transaction | null
  }
  transactions: {
    type: 'Transaction'
    args: Record<QueryTransactionsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: TransactionWhereInput | null, orderBy?: prisma.TransactionOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Transaction[]> | prisma.Transaction[]
  }
  transactionsConnection: {
    type: 'TransactionConnection'
    args: Record<QueryTransactionsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: TransactionWhereInput | null, orderBy?: prisma.TransactionOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TransactionConnection> | prisma.TransactionConnection
  }
  bill: {
    type: 'Bill'
    args: Record<QueryBillArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: BillWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Bill | null> | prisma.Bill | null
  }
  bills: {
    type: 'Bill'
    args: Record<QueryBillsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: BillWhereInput | null, orderBy?: prisma.BillOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Bill[]> | prisma.Bill[]
  }
  billsConnection: {
    type: 'BillConnection'
    args: Record<QueryBillsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: BillWhereInput | null, orderBy?: prisma.BillOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BillConnection> | prisma.BillConnection
  }
}
  

// Types for User

type UserObject =
  | UserFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'firstName', args?: [] | false, alias?: string  } 
  | { name: 'middleName', args?: [] | false, alias?: string  } 
  | { name: 'lastName', args?: [] | false, alias?: string  } 
  | { name: 'socialSecurityNumber', args?: [] | false, alias?: string  } 
  | { name: 'comment', args?: [] | false, alias?: string  } 
  | { name: 'metadata', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'deletedAt', args?: [] | false, alias?: string  } 

type UserFields =
  | 'id'
  | 'email'
  | 'firstName'
  | 'middleName'
  | 'lastName'
  | 'socialSecurityNumber'
  | 'comment'
  | 'metadata'
  | 'createdAt'
  | 'updatedAt'
  | 'deletedAt'



  

export interface UserFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  firstName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  middleName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  lastName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  socialSecurityNumber: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  comment: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  metadata: {
    type: 'Json'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  deletedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for UserConnection

type UserConnectionObject =
  | UserConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type UserConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface UserConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'UserEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserEdge[]> | prisma.UserEdge[]
  }
  aggregate: {
    type: 'AggregateUser'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateUser> | prisma.AggregateUser
  }
}
  

// Types for PageInfo

type PageInfoObject =
  | PageInfoFields
  | { name: 'hasNextPage', args?: [] | false, alias?: string  } 
  | { name: 'hasPreviousPage', args?: [] | false, alias?: string  } 
  | { name: 'startCursor', args?: [] | false, alias?: string  } 
  | { name: 'endCursor', args?: [] | false, alias?: string  } 

type PageInfoFields =
  | 'hasNextPage'
  | 'hasPreviousPage'
  | 'startCursor'
  | 'endCursor'



  

export interface PageInfoFieldDetails {
  hasNextPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  hasPreviousPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  endCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for UserEdge

type UserEdgeObject =
  | UserEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type UserEdgeFields =
  | 'node'
  | 'cursor'



  

export interface UserEdgeFieldDetails {
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateUser

type AggregateUserObject =
  | AggregateUserFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateUserFields =
  | 'count'



  

export interface AggregateUserFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Transaction

type TransactionObject =
  | TransactionFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'user', args?: [] | false, alias?: string  } 
  | { name: 'amount', args?: [] | false, alias?: string  } 
  | { name: 'bill', args?: [] | false, alias?: string  } 
  | { name: 'billableFromDate', args?: [] | false, alias?: string  } 
  | { name: 'startDate', args?: [] | false, alias?: string  } 
  | { name: 'endDate', args?: [] | false, alias?: string  } 
  | { name: 'isPartOfPeriodicBill', args?: [] | false, alias?: string  } 
  | { name: 'description', args?: [] | false, alias?: string  } 
  | { name: 'metadata', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'deletedAt', args?: [] | false, alias?: string  } 

type TransactionFields =
  | 'id'
  | 'user'
  | 'amount'
  | 'bill'
  | 'billableFromDate'
  | 'startDate'
  | 'endDate'
  | 'isPartOfPeriodicBill'
  | 'description'
  | 'metadata'
  | 'createdAt'
  | 'updatedAt'
  | 'deletedAt'



  

export interface TransactionFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  user: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Transaction">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  amount: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  bill: {
    type: 'Bill'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Transaction">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Bill | null> | prisma.Bill | null
  }
  billableFromDate: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startDate: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  endDate: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  isPartOfPeriodicBill: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  description: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  metadata: {
    type: 'Json'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  deletedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for Bill

type BillObject =
  | BillFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'user', args?: [] | false, alias?: string  } 
  | { name: 'billableFromDate', args?: [] | false, alias?: string  } 
  | { name: 'startDate', args?: [] | false, alias?: string  } 
  | { name: 'endDate', args?: [] | false, alias?: string  } 
  | { name: 'isPeriodic', args?: [] | false, alias?: string  } 
  | { name: 'transactions', args?: BillTransactionsArgs[] | false, alias?: string  } 
  | { name: 'status', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'deletedAt', args?: [] | false, alias?: string  } 

type BillFields =
  | 'id'
  | 'user'
  | 'billableFromDate'
  | 'startDate'
  | 'endDate'
  | 'isPeriodic'
  | 'transactions'
  | 'status'
  | 'createdAt'
  | 'updatedAt'
  | 'deletedAt'


type BillTransactionsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface BillFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  user: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Bill">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  billableFromDate: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startDate: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  endDate: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  isPeriodic: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  transactions: {
    type: 'Transaction'
    args: Record<BillTransactionsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Bill">,
      args: { where?: TransactionWhereInput | null, orderBy?: prisma.TransactionOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Transaction[]> | prisma.Transaction[]
  }
  status: {
    type: 'BillStatus'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Bill">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BillStatus | null> | prisma.BillStatus | null
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  deletedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for TransactionConnection

type TransactionConnectionObject =
  | TransactionConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type TransactionConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface TransactionConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TransactionConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'TransactionEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"TransactionConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TransactionEdge[]> | prisma.TransactionEdge[]
  }
  aggregate: {
    type: 'AggregateTransaction'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TransactionConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateTransaction> | prisma.AggregateTransaction
  }
}
  

// Types for TransactionEdge

type TransactionEdgeObject =
  | TransactionEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type TransactionEdgeFields =
  | 'node'
  | 'cursor'



  

export interface TransactionEdgeFieldDetails {
  node: {
    type: 'Transaction'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TransactionEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Transaction> | prisma.Transaction
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateTransaction

type AggregateTransactionObject =
  | AggregateTransactionFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateTransactionFields =
  | 'count'



  

export interface AggregateTransactionFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for BillConnection

type BillConnectionObject =
  | BillConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type BillConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface BillConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"BillConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'BillEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"BillConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BillEdge[]> | prisma.BillEdge[]
  }
  aggregate: {
    type: 'AggregateBill'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"BillConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateBill> | prisma.AggregateBill
  }
}
  

// Types for BillEdge

type BillEdgeObject =
  | BillEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type BillEdgeFields =
  | 'node'
  | 'cursor'



  

export interface BillEdgeFieldDetails {
  node: {
    type: 'Bill'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"BillEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Bill> | prisma.Bill
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateBill

type AggregateBillObject =
  | AggregateBillFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateBillFields =
  | 'count'



  

export interface AggregateBillFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Mutation

type MutationObject =
  | MutationFields
  | { name: 'createUser', args?: MutationCreateUserArgs[] | false, alias?: string  } 
  | { name: 'updateUser', args?: MutationUpdateUserArgs[] | false, alias?: string  } 
  | { name: 'updateManyUsers', args?: MutationUpdateManyUsersArgs[] | false, alias?: string  } 
  | { name: 'upsertUser', args?: MutationUpsertUserArgs[] | false, alias?: string  } 
  | { name: 'deleteUser', args?: MutationDeleteUserArgs[] | false, alias?: string  } 
  | { name: 'deleteManyUsers', args?: MutationDeleteManyUsersArgs[] | false, alias?: string  } 
  | { name: 'createTransaction', args?: MutationCreateTransactionArgs[] | false, alias?: string  } 
  | { name: 'updateTransaction', args?: MutationUpdateTransactionArgs[] | false, alias?: string  } 
  | { name: 'updateManyTransactions', args?: MutationUpdateManyTransactionsArgs[] | false, alias?: string  } 
  | { name: 'upsertTransaction', args?: MutationUpsertTransactionArgs[] | false, alias?: string  } 
  | { name: 'deleteTransaction', args?: MutationDeleteTransactionArgs[] | false, alias?: string  } 
  | { name: 'deleteManyTransactions', args?: MutationDeleteManyTransactionsArgs[] | false, alias?: string  } 
  | { name: 'createBill', args?: MutationCreateBillArgs[] | false, alias?: string  } 
  | { name: 'updateBill', args?: MutationUpdateBillArgs[] | false, alias?: string  } 
  | { name: 'updateManyBills', args?: MutationUpdateManyBillsArgs[] | false, alias?: string  } 
  | { name: 'upsertBill', args?: MutationUpsertBillArgs[] | false, alias?: string  } 
  | { name: 'deleteBill', args?: MutationDeleteBillArgs[] | false, alias?: string  } 
  | { name: 'deleteManyBills', args?: MutationDeleteManyBillsArgs[] | false, alias?: string  } 

type MutationFields =
  | 'createUser'
  | 'updateUser'
  | 'updateManyUsers'
  | 'upsertUser'
  | 'deleteUser'
  | 'deleteManyUsers'
  | 'createTransaction'
  | 'updateTransaction'
  | 'updateManyTransactions'
  | 'upsertTransaction'
  | 'deleteTransaction'
  | 'deleteManyTransactions'
  | 'createBill'
  | 'updateBill'
  | 'updateManyBills'
  | 'upsertBill'
  | 'deleteBill'
  | 'deleteManyBills'


type MutationCreateUserArgs =
  | 'data'
type MutationUpdateUserArgs =
  | 'data'
  | 'where'
type MutationUpdateManyUsersArgs =
  | 'data'
  | 'where'
type MutationUpsertUserArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteUserArgs =
  | 'where'
type MutationDeleteManyUsersArgs =
  | 'where'
type MutationCreateTransactionArgs =
  | 'data'
type MutationUpdateTransactionArgs =
  | 'data'
  | 'where'
type MutationUpdateManyTransactionsArgs =
  | 'data'
  | 'where'
type MutationUpsertTransactionArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteTransactionArgs =
  | 'where'
type MutationDeleteManyTransactionsArgs =
  | 'where'
type MutationCreateBillArgs =
  | 'data'
type MutationUpdateBillArgs =
  | 'data'
  | 'where'
type MutationUpdateManyBillsArgs =
  | 'data'
  | 'where'
type MutationUpsertBillArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteBillArgs =
  | 'where'
type MutationDeleteManyBillsArgs =
  | 'where'
  

export interface MutationFieldDetails {
  createUser: {
    type: 'User'
    args: Record<MutationCreateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  updateUser: {
    type: 'User'
    args: Record<MutationUpdateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateInput, where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updateManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateManyMutationInput, where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertUser: {
    type: 'User'
    args: Record<MutationUpsertUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput, create: UserCreateInput, update: UserUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  deleteUser: {
    type: 'User'
    args: Record<MutationDeleteUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  deleteManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createTransaction: {
    type: 'Transaction'
    args: Record<MutationCreateTransactionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TransactionCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Transaction> | prisma.Transaction
  }
  updateTransaction: {
    type: 'Transaction'
    args: Record<MutationUpdateTransactionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TransactionUpdateInput, where: TransactionWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Transaction | null> | prisma.Transaction | null
  }
  updateManyTransactions: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyTransactionsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TransactionUpdateManyMutationInput, where?: TransactionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertTransaction: {
    type: 'Transaction'
    args: Record<MutationUpsertTransactionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: TransactionWhereUniqueInput, create: TransactionCreateInput, update: TransactionUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Transaction> | prisma.Transaction
  }
  deleteTransaction: {
    type: 'Transaction'
    args: Record<MutationDeleteTransactionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: TransactionWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Transaction | null> | prisma.Transaction | null
  }
  deleteManyTransactions: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyTransactionsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: TransactionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createBill: {
    type: 'Bill'
    args: Record<MutationCreateBillArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: BillCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Bill> | prisma.Bill
  }
  updateBill: {
    type: 'Bill'
    args: Record<MutationUpdateBillArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: BillUpdateInput, where: BillWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Bill | null> | prisma.Bill | null
  }
  updateManyBills: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyBillsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: BillUpdateManyMutationInput, where?: BillWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertBill: {
    type: 'Bill'
    args: Record<MutationUpsertBillArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: BillWhereUniqueInput, create: BillCreateInput, update: BillUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Bill> | prisma.Bill
  }
  deleteBill: {
    type: 'Bill'
    args: Record<MutationDeleteBillArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: BillWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Bill | null> | prisma.Bill | null
  }
  deleteManyBills: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyBillsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: BillWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
}
  

// Types for BatchPayload

type BatchPayloadObject =
  | BatchPayloadFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type BatchPayloadFields =
  | 'count'



  

export interface BatchPayloadFieldDetails {
  count: {
    type: 'Long'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Subscription

type SubscriptionObject =
  | SubscriptionFields
  | { name: 'user', args?: SubscriptionUserArgs[] | false, alias?: string  } 
  | { name: 'transaction', args?: SubscriptionTransactionArgs[] | false, alias?: string  } 
  | { name: 'bill', args?: SubscriptionBillArgs[] | false, alias?: string  } 

type SubscriptionFields =
  | 'user'
  | 'transaction'
  | 'bill'


type SubscriptionUserArgs =
  | 'where'
type SubscriptionTransactionArgs =
  | 'where'
type SubscriptionBillArgs =
  | 'where'
  

export interface SubscriptionFieldDetails {
  user: {
    type: 'UserSubscriptionPayload'
    args: Record<SubscriptionUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: UserSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserSubscriptionPayload | null> | prisma.UserSubscriptionPayload | null
  }
  transaction: {
    type: 'TransactionSubscriptionPayload'
    args: Record<SubscriptionTransactionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: TransactionSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TransactionSubscriptionPayload | null> | prisma.TransactionSubscriptionPayload | null
  }
  bill: {
    type: 'BillSubscriptionPayload'
    args: Record<SubscriptionBillArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: BillSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BillSubscriptionPayload | null> | prisma.BillSubscriptionPayload | null
  }
}
  

// Types for UserSubscriptionPayload

type UserSubscriptionPayloadObject =
  | UserSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type UserSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface UserSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'UserPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserPreviousValues | null> | prisma.UserPreviousValues | null
  }
}
  

// Types for UserPreviousValues

type UserPreviousValuesObject =
  | UserPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'firstName', args?: [] | false, alias?: string  } 
  | { name: 'middleName', args?: [] | false, alias?: string  } 
  | { name: 'lastName', args?: [] | false, alias?: string  } 
  | { name: 'socialSecurityNumber', args?: [] | false, alias?: string  } 
  | { name: 'comment', args?: [] | false, alias?: string  } 
  | { name: 'metadata', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'deletedAt', args?: [] | false, alias?: string  } 

type UserPreviousValuesFields =
  | 'id'
  | 'email'
  | 'firstName'
  | 'middleName'
  | 'lastName'
  | 'socialSecurityNumber'
  | 'comment'
  | 'metadata'
  | 'createdAt'
  | 'updatedAt'
  | 'deletedAt'



  

export interface UserPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  firstName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  middleName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  lastName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  socialSecurityNumber: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  comment: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  metadata: {
    type: 'Json'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  deletedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for TransactionSubscriptionPayload

type TransactionSubscriptionPayloadObject =
  | TransactionSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type TransactionSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface TransactionSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TransactionSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Transaction'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"TransactionSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Transaction | null> | prisma.Transaction | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'TransactionPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"TransactionSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TransactionPreviousValues | null> | prisma.TransactionPreviousValues | null
  }
}
  

// Types for TransactionPreviousValues

type TransactionPreviousValuesObject =
  | TransactionPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'amount', args?: [] | false, alias?: string  } 
  | { name: 'billableFromDate', args?: [] | false, alias?: string  } 
  | { name: 'startDate', args?: [] | false, alias?: string  } 
  | { name: 'endDate', args?: [] | false, alias?: string  } 
  | { name: 'isPartOfPeriodicBill', args?: [] | false, alias?: string  } 
  | { name: 'description', args?: [] | false, alias?: string  } 
  | { name: 'metadata', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'deletedAt', args?: [] | false, alias?: string  } 

type TransactionPreviousValuesFields =
  | 'id'
  | 'amount'
  | 'billableFromDate'
  | 'startDate'
  | 'endDate'
  | 'isPartOfPeriodicBill'
  | 'description'
  | 'metadata'
  | 'createdAt'
  | 'updatedAt'
  | 'deletedAt'



  

export interface TransactionPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  amount: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  billableFromDate: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startDate: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  endDate: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  isPartOfPeriodicBill: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  description: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  metadata: {
    type: 'Json'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  deletedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for BillSubscriptionPayload

type BillSubscriptionPayloadObject =
  | BillSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type BillSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface BillSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"BillSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Bill'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"BillSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Bill | null> | prisma.Bill | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'BillPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"BillSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BillPreviousValues | null> | prisma.BillPreviousValues | null
  }
}
  

// Types for BillPreviousValues

type BillPreviousValuesObject =
  | BillPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'billableFromDate', args?: [] | false, alias?: string  } 
  | { name: 'startDate', args?: [] | false, alias?: string  } 
  | { name: 'endDate', args?: [] | false, alias?: string  } 
  | { name: 'isPeriodic', args?: [] | false, alias?: string  } 
  | { name: 'status', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'deletedAt', args?: [] | false, alias?: string  } 

type BillPreviousValuesFields =
  | 'id'
  | 'billableFromDate'
  | 'startDate'
  | 'endDate'
  | 'isPeriodic'
  | 'status'
  | 'createdAt'
  | 'updatedAt'
  | 'deletedAt'



  

export interface BillPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  billableFromDate: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startDate: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  endDate: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  isPeriodic: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  status: {
    type: 'BillStatus'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"BillPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BillStatus | null> | prisma.BillStatus | null
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  deletedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  


export interface UserWhereUniqueInput {
  id?: string | null
  email?: string | null
}
export type UserWhereUniqueInputInputObject =
  | Extract<keyof UserWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'email', alias?: string  } 
  
export interface UserWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  email?: string | null
  email_not?: string | null
  email_in?: string[]
  email_not_in?: string[]
  email_lt?: string | null
  email_lte?: string | null
  email_gt?: string | null
  email_gte?: string | null
  email_contains?: string | null
  email_not_contains?: string | null
  email_starts_with?: string | null
  email_not_starts_with?: string | null
  email_ends_with?: string | null
  email_not_ends_with?: string | null
  firstName?: string | null
  firstName_not?: string | null
  firstName_in?: string[]
  firstName_not_in?: string[]
  firstName_lt?: string | null
  firstName_lte?: string | null
  firstName_gt?: string | null
  firstName_gte?: string | null
  firstName_contains?: string | null
  firstName_not_contains?: string | null
  firstName_starts_with?: string | null
  firstName_not_starts_with?: string | null
  firstName_ends_with?: string | null
  firstName_not_ends_with?: string | null
  middleName?: string | null
  middleName_not?: string | null
  middleName_in?: string[]
  middleName_not_in?: string[]
  middleName_lt?: string | null
  middleName_lte?: string | null
  middleName_gt?: string | null
  middleName_gte?: string | null
  middleName_contains?: string | null
  middleName_not_contains?: string | null
  middleName_starts_with?: string | null
  middleName_not_starts_with?: string | null
  middleName_ends_with?: string | null
  middleName_not_ends_with?: string | null
  lastName?: string | null
  lastName_not?: string | null
  lastName_in?: string[]
  lastName_not_in?: string[]
  lastName_lt?: string | null
  lastName_lte?: string | null
  lastName_gt?: string | null
  lastName_gte?: string | null
  lastName_contains?: string | null
  lastName_not_contains?: string | null
  lastName_starts_with?: string | null
  lastName_not_starts_with?: string | null
  lastName_ends_with?: string | null
  lastName_not_ends_with?: string | null
  socialSecurityNumber?: string | null
  socialSecurityNumber_not?: string | null
  socialSecurityNumber_in?: string[]
  socialSecurityNumber_not_in?: string[]
  socialSecurityNumber_lt?: string | null
  socialSecurityNumber_lte?: string | null
  socialSecurityNumber_gt?: string | null
  socialSecurityNumber_gte?: string | null
  socialSecurityNumber_contains?: string | null
  socialSecurityNumber_not_contains?: string | null
  socialSecurityNumber_starts_with?: string | null
  socialSecurityNumber_not_starts_with?: string | null
  socialSecurityNumber_ends_with?: string | null
  socialSecurityNumber_not_ends_with?: string | null
  comment?: string | null
  comment_not?: string | null
  comment_in?: string[]
  comment_not_in?: string[]
  comment_lt?: string | null
  comment_lte?: string | null
  comment_gt?: string | null
  comment_gte?: string | null
  comment_contains?: string | null
  comment_not_contains?: string | null
  comment_starts_with?: string | null
  comment_not_starts_with?: string | null
  comment_ends_with?: string | null
  comment_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  deletedAt?: string | null
  deletedAt_not?: string | null
  deletedAt_in?: string[]
  deletedAt_not_in?: string[]
  deletedAt_lt?: string | null
  deletedAt_lte?: string | null
  deletedAt_gt?: string | null
  deletedAt_gte?: string | null
  AND?: UserWhereInput[]
  OR?: UserWhereInput[]
  NOT?: UserWhereInput[]
}
export type UserWhereInputInputObject =
  | Extract<keyof UserWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'email_not', alias?: string  } 
  | { name: 'email_in', alias?: string  } 
  | { name: 'email_not_in', alias?: string  } 
  | { name: 'email_lt', alias?: string  } 
  | { name: 'email_lte', alias?: string  } 
  | { name: 'email_gt', alias?: string  } 
  | { name: 'email_gte', alias?: string  } 
  | { name: 'email_contains', alias?: string  } 
  | { name: 'email_not_contains', alias?: string  } 
  | { name: 'email_starts_with', alias?: string  } 
  | { name: 'email_not_starts_with', alias?: string  } 
  | { name: 'email_ends_with', alias?: string  } 
  | { name: 'email_not_ends_with', alias?: string  } 
  | { name: 'firstName', alias?: string  } 
  | { name: 'firstName_not', alias?: string  } 
  | { name: 'firstName_in', alias?: string  } 
  | { name: 'firstName_not_in', alias?: string  } 
  | { name: 'firstName_lt', alias?: string  } 
  | { name: 'firstName_lte', alias?: string  } 
  | { name: 'firstName_gt', alias?: string  } 
  | { name: 'firstName_gte', alias?: string  } 
  | { name: 'firstName_contains', alias?: string  } 
  | { name: 'firstName_not_contains', alias?: string  } 
  | { name: 'firstName_starts_with', alias?: string  } 
  | { name: 'firstName_not_starts_with', alias?: string  } 
  | { name: 'firstName_ends_with', alias?: string  } 
  | { name: 'firstName_not_ends_with', alias?: string  } 
  | { name: 'middleName', alias?: string  } 
  | { name: 'middleName_not', alias?: string  } 
  | { name: 'middleName_in', alias?: string  } 
  | { name: 'middleName_not_in', alias?: string  } 
  | { name: 'middleName_lt', alias?: string  } 
  | { name: 'middleName_lte', alias?: string  } 
  | { name: 'middleName_gt', alias?: string  } 
  | { name: 'middleName_gte', alias?: string  } 
  | { name: 'middleName_contains', alias?: string  } 
  | { name: 'middleName_not_contains', alias?: string  } 
  | { name: 'middleName_starts_with', alias?: string  } 
  | { name: 'middleName_not_starts_with', alias?: string  } 
  | { name: 'middleName_ends_with', alias?: string  } 
  | { name: 'middleName_not_ends_with', alias?: string  } 
  | { name: 'lastName', alias?: string  } 
  | { name: 'lastName_not', alias?: string  } 
  | { name: 'lastName_in', alias?: string  } 
  | { name: 'lastName_not_in', alias?: string  } 
  | { name: 'lastName_lt', alias?: string  } 
  | { name: 'lastName_lte', alias?: string  } 
  | { name: 'lastName_gt', alias?: string  } 
  | { name: 'lastName_gte', alias?: string  } 
  | { name: 'lastName_contains', alias?: string  } 
  | { name: 'lastName_not_contains', alias?: string  } 
  | { name: 'lastName_starts_with', alias?: string  } 
  | { name: 'lastName_not_starts_with', alias?: string  } 
  | { name: 'lastName_ends_with', alias?: string  } 
  | { name: 'lastName_not_ends_with', alias?: string  } 
  | { name: 'socialSecurityNumber', alias?: string  } 
  | { name: 'socialSecurityNumber_not', alias?: string  } 
  | { name: 'socialSecurityNumber_in', alias?: string  } 
  | { name: 'socialSecurityNumber_not_in', alias?: string  } 
  | { name: 'socialSecurityNumber_lt', alias?: string  } 
  | { name: 'socialSecurityNumber_lte', alias?: string  } 
  | { name: 'socialSecurityNumber_gt', alias?: string  } 
  | { name: 'socialSecurityNumber_gte', alias?: string  } 
  | { name: 'socialSecurityNumber_contains', alias?: string  } 
  | { name: 'socialSecurityNumber_not_contains', alias?: string  } 
  | { name: 'socialSecurityNumber_starts_with', alias?: string  } 
  | { name: 'socialSecurityNumber_not_starts_with', alias?: string  } 
  | { name: 'socialSecurityNumber_ends_with', alias?: string  } 
  | { name: 'socialSecurityNumber_not_ends_with', alias?: string  } 
  | { name: 'comment', alias?: string  } 
  | { name: 'comment_not', alias?: string  } 
  | { name: 'comment_in', alias?: string  } 
  | { name: 'comment_not_in', alias?: string  } 
  | { name: 'comment_lt', alias?: string  } 
  | { name: 'comment_lte', alias?: string  } 
  | { name: 'comment_gt', alias?: string  } 
  | { name: 'comment_gte', alias?: string  } 
  | { name: 'comment_contains', alias?: string  } 
  | { name: 'comment_not_contains', alias?: string  } 
  | { name: 'comment_starts_with', alias?: string  } 
  | { name: 'comment_not_starts_with', alias?: string  } 
  | { name: 'comment_ends_with', alias?: string  } 
  | { name: 'comment_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'deletedAt', alias?: string  } 
  | { name: 'deletedAt_not', alias?: string  } 
  | { name: 'deletedAt_in', alias?: string  } 
  | { name: 'deletedAt_not_in', alias?: string  } 
  | { name: 'deletedAt_lt', alias?: string  } 
  | { name: 'deletedAt_lte', alias?: string  } 
  | { name: 'deletedAt_gt', alias?: string  } 
  | { name: 'deletedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface TransactionWhereUniqueInput {
  id?: string | null
}
export type TransactionWhereUniqueInputInputObject =
  | Extract<keyof TransactionWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface TransactionWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  user?: UserWhereInput | null
  amount?: number | null
  amount_not?: number | null
  amount_in?: number[]
  amount_not_in?: number[]
  amount_lt?: number | null
  amount_lte?: number | null
  amount_gt?: number | null
  amount_gte?: number | null
  bill?: BillWhereInput | null
  billableFromDate?: string | null
  billableFromDate_not?: string | null
  billableFromDate_in?: string[]
  billableFromDate_not_in?: string[]
  billableFromDate_lt?: string | null
  billableFromDate_lte?: string | null
  billableFromDate_gt?: string | null
  billableFromDate_gte?: string | null
  startDate?: string | null
  startDate_not?: string | null
  startDate_in?: string[]
  startDate_not_in?: string[]
  startDate_lt?: string | null
  startDate_lte?: string | null
  startDate_gt?: string | null
  startDate_gte?: string | null
  endDate?: string | null
  endDate_not?: string | null
  endDate_in?: string[]
  endDate_not_in?: string[]
  endDate_lt?: string | null
  endDate_lte?: string | null
  endDate_gt?: string | null
  endDate_gte?: string | null
  isPartOfPeriodicBill?: boolean | null
  isPartOfPeriodicBill_not?: boolean | null
  description?: string | null
  description_not?: string | null
  description_in?: string[]
  description_not_in?: string[]
  description_lt?: string | null
  description_lte?: string | null
  description_gt?: string | null
  description_gte?: string | null
  description_contains?: string | null
  description_not_contains?: string | null
  description_starts_with?: string | null
  description_not_starts_with?: string | null
  description_ends_with?: string | null
  description_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  deletedAt?: string | null
  deletedAt_not?: string | null
  deletedAt_in?: string[]
  deletedAt_not_in?: string[]
  deletedAt_lt?: string | null
  deletedAt_lte?: string | null
  deletedAt_gt?: string | null
  deletedAt_gte?: string | null
  AND?: TransactionWhereInput[]
  OR?: TransactionWhereInput[]
  NOT?: TransactionWhereInput[]
}
export type TransactionWhereInputInputObject =
  | Extract<keyof TransactionWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'user', alias?: string  } 
  | { name: 'amount', alias?: string  } 
  | { name: 'amount_not', alias?: string  } 
  | { name: 'amount_in', alias?: string  } 
  | { name: 'amount_not_in', alias?: string  } 
  | { name: 'amount_lt', alias?: string  } 
  | { name: 'amount_lte', alias?: string  } 
  | { name: 'amount_gt', alias?: string  } 
  | { name: 'amount_gte', alias?: string  } 
  | { name: 'bill', alias?: string  } 
  | { name: 'billableFromDate', alias?: string  } 
  | { name: 'billableFromDate_not', alias?: string  } 
  | { name: 'billableFromDate_in', alias?: string  } 
  | { name: 'billableFromDate_not_in', alias?: string  } 
  | { name: 'billableFromDate_lt', alias?: string  } 
  | { name: 'billableFromDate_lte', alias?: string  } 
  | { name: 'billableFromDate_gt', alias?: string  } 
  | { name: 'billableFromDate_gte', alias?: string  } 
  | { name: 'startDate', alias?: string  } 
  | { name: 'startDate_not', alias?: string  } 
  | { name: 'startDate_in', alias?: string  } 
  | { name: 'startDate_not_in', alias?: string  } 
  | { name: 'startDate_lt', alias?: string  } 
  | { name: 'startDate_lte', alias?: string  } 
  | { name: 'startDate_gt', alias?: string  } 
  | { name: 'startDate_gte', alias?: string  } 
  | { name: 'endDate', alias?: string  } 
  | { name: 'endDate_not', alias?: string  } 
  | { name: 'endDate_in', alias?: string  } 
  | { name: 'endDate_not_in', alias?: string  } 
  | { name: 'endDate_lt', alias?: string  } 
  | { name: 'endDate_lte', alias?: string  } 
  | { name: 'endDate_gt', alias?: string  } 
  | { name: 'endDate_gte', alias?: string  } 
  | { name: 'isPartOfPeriodicBill', alias?: string  } 
  | { name: 'isPartOfPeriodicBill_not', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'description_not', alias?: string  } 
  | { name: 'description_in', alias?: string  } 
  | { name: 'description_not_in', alias?: string  } 
  | { name: 'description_lt', alias?: string  } 
  | { name: 'description_lte', alias?: string  } 
  | { name: 'description_gt', alias?: string  } 
  | { name: 'description_gte', alias?: string  } 
  | { name: 'description_contains', alias?: string  } 
  | { name: 'description_not_contains', alias?: string  } 
  | { name: 'description_starts_with', alias?: string  } 
  | { name: 'description_not_starts_with', alias?: string  } 
  | { name: 'description_ends_with', alias?: string  } 
  | { name: 'description_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'deletedAt', alias?: string  } 
  | { name: 'deletedAt_not', alias?: string  } 
  | { name: 'deletedAt_in', alias?: string  } 
  | { name: 'deletedAt_not_in', alias?: string  } 
  | { name: 'deletedAt_lt', alias?: string  } 
  | { name: 'deletedAt_lte', alias?: string  } 
  | { name: 'deletedAt_gt', alias?: string  } 
  | { name: 'deletedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface BillWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  user?: UserWhereInput | null
  billableFromDate?: string | null
  billableFromDate_not?: string | null
  billableFromDate_in?: string[]
  billableFromDate_not_in?: string[]
  billableFromDate_lt?: string | null
  billableFromDate_lte?: string | null
  billableFromDate_gt?: string | null
  billableFromDate_gte?: string | null
  startDate?: string | null
  startDate_not?: string | null
  startDate_in?: string[]
  startDate_not_in?: string[]
  startDate_lt?: string | null
  startDate_lte?: string | null
  startDate_gt?: string | null
  startDate_gte?: string | null
  endDate?: string | null
  endDate_not?: string | null
  endDate_in?: string[]
  endDate_not_in?: string[]
  endDate_lt?: string | null
  endDate_lte?: string | null
  endDate_gt?: string | null
  endDate_gte?: string | null
  isPeriodic?: boolean | null
  isPeriodic_not?: boolean | null
  transactions_every?: TransactionWhereInput | null
  transactions_some?: TransactionWhereInput | null
  transactions_none?: TransactionWhereInput | null
  status?: prisma.BillStatus | null
  status_not?: prisma.BillStatus | null
  status_in?: prisma.BillStatus[]
  status_not_in?: prisma.BillStatus[]
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  deletedAt?: string | null
  deletedAt_not?: string | null
  deletedAt_in?: string[]
  deletedAt_not_in?: string[]
  deletedAt_lt?: string | null
  deletedAt_lte?: string | null
  deletedAt_gt?: string | null
  deletedAt_gte?: string | null
  AND?: BillWhereInput[]
  OR?: BillWhereInput[]
  NOT?: BillWhereInput[]
}
export type BillWhereInputInputObject =
  | Extract<keyof BillWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'user', alias?: string  } 
  | { name: 'billableFromDate', alias?: string  } 
  | { name: 'billableFromDate_not', alias?: string  } 
  | { name: 'billableFromDate_in', alias?: string  } 
  | { name: 'billableFromDate_not_in', alias?: string  } 
  | { name: 'billableFromDate_lt', alias?: string  } 
  | { name: 'billableFromDate_lte', alias?: string  } 
  | { name: 'billableFromDate_gt', alias?: string  } 
  | { name: 'billableFromDate_gte', alias?: string  } 
  | { name: 'startDate', alias?: string  } 
  | { name: 'startDate_not', alias?: string  } 
  | { name: 'startDate_in', alias?: string  } 
  | { name: 'startDate_not_in', alias?: string  } 
  | { name: 'startDate_lt', alias?: string  } 
  | { name: 'startDate_lte', alias?: string  } 
  | { name: 'startDate_gt', alias?: string  } 
  | { name: 'startDate_gte', alias?: string  } 
  | { name: 'endDate', alias?: string  } 
  | { name: 'endDate_not', alias?: string  } 
  | { name: 'endDate_in', alias?: string  } 
  | { name: 'endDate_not_in', alias?: string  } 
  | { name: 'endDate_lt', alias?: string  } 
  | { name: 'endDate_lte', alias?: string  } 
  | { name: 'endDate_gt', alias?: string  } 
  | { name: 'endDate_gte', alias?: string  } 
  | { name: 'isPeriodic', alias?: string  } 
  | { name: 'isPeriodic_not', alias?: string  } 
  | { name: 'transactions_every', alias?: string  } 
  | { name: 'transactions_some', alias?: string  } 
  | { name: 'transactions_none', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'status_not', alias?: string  } 
  | { name: 'status_in', alias?: string  } 
  | { name: 'status_not_in', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'deletedAt', alias?: string  } 
  | { name: 'deletedAt_not', alias?: string  } 
  | { name: 'deletedAt_in', alias?: string  } 
  | { name: 'deletedAt_not_in', alias?: string  } 
  | { name: 'deletedAt_lt', alias?: string  } 
  | { name: 'deletedAt_lte', alias?: string  } 
  | { name: 'deletedAt_gt', alias?: string  } 
  | { name: 'deletedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface BillWhereUniqueInput {
  id?: string | null
}
export type BillWhereUniqueInputInputObject =
  | Extract<keyof BillWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface UserCreateInput {
  id?: string | null
  email?: string
  firstName?: string
  middleName?: string | null
  lastName?: string
  socialSecurityNumber?: string | null
  comment?: string | null
  metadata?: undefined | null
  deletedAt?: string | null
}
export type UserCreateInputInputObject =
  | Extract<keyof UserCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'firstName', alias?: string  } 
  | { name: 'middleName', alias?: string  } 
  | { name: 'lastName', alias?: string  } 
  | { name: 'socialSecurityNumber', alias?: string  } 
  | { name: 'comment', alias?: string  } 
  | { name: 'metadata', alias?: string  } 
  | { name: 'deletedAt', alias?: string  } 
  
export interface UserUpdateInput {
  email?: string | null
  firstName?: string | null
  middleName?: string | null
  lastName?: string | null
  socialSecurityNumber?: string | null
  comment?: string | null
  metadata?: undefined | null
  deletedAt?: string | null
}
export type UserUpdateInputInputObject =
  | Extract<keyof UserUpdateInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'firstName', alias?: string  } 
  | { name: 'middleName', alias?: string  } 
  | { name: 'lastName', alias?: string  } 
  | { name: 'socialSecurityNumber', alias?: string  } 
  | { name: 'comment', alias?: string  } 
  | { name: 'metadata', alias?: string  } 
  | { name: 'deletedAt', alias?: string  } 
  
export interface UserUpdateManyMutationInput {
  email?: string | null
  firstName?: string | null
  middleName?: string | null
  lastName?: string | null
  socialSecurityNumber?: string | null
  comment?: string | null
  metadata?: undefined | null
  deletedAt?: string | null
}
export type UserUpdateManyMutationInputInputObject =
  | Extract<keyof UserUpdateManyMutationInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'firstName', alias?: string  } 
  | { name: 'middleName', alias?: string  } 
  | { name: 'lastName', alias?: string  } 
  | { name: 'socialSecurityNumber', alias?: string  } 
  | { name: 'comment', alias?: string  } 
  | { name: 'metadata', alias?: string  } 
  | { name: 'deletedAt', alias?: string  } 
  
export interface TransactionCreateInput {
  id?: string | null
  user?: UserCreateOneInput
  amount?: number
  bill?: BillCreateOneWithoutTransactionsInput | null
  billableFromDate?: string
  startDate?: string
  endDate?: string
  isPartOfPeriodicBill?: boolean | null
  description?: string | null
  metadata?: undefined | null
  deletedAt?: string | null
}
export type TransactionCreateInputInputObject =
  | Extract<keyof TransactionCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'user', alias?: string  } 
  | { name: 'amount', alias?: string  } 
  | { name: 'bill', alias?: string  } 
  | { name: 'billableFromDate', alias?: string  } 
  | { name: 'startDate', alias?: string  } 
  | { name: 'endDate', alias?: string  } 
  | { name: 'isPartOfPeriodicBill', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'metadata', alias?: string  } 
  | { name: 'deletedAt', alias?: string  } 
  
export interface UserCreateOneInput {
  create?: UserCreateInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserCreateOneInputInputObject =
  | Extract<keyof UserCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface BillCreateOneWithoutTransactionsInput {
  create?: BillCreateWithoutTransactionsInput | null
  connect?: BillWhereUniqueInput | null
}
export type BillCreateOneWithoutTransactionsInputInputObject =
  | Extract<keyof BillCreateOneWithoutTransactionsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface BillCreateWithoutTransactionsInput {
  id?: string | null
  user?: UserCreateOneInput
  billableFromDate?: string
  startDate?: string
  endDate?: string
  isPeriodic?: boolean | null
  status?: prisma.BillStatus | null
  deletedAt?: string | null
}
export type BillCreateWithoutTransactionsInputInputObject =
  | Extract<keyof BillCreateWithoutTransactionsInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'user', alias?: string  } 
  | { name: 'billableFromDate', alias?: string  } 
  | { name: 'startDate', alias?: string  } 
  | { name: 'endDate', alias?: string  } 
  | { name: 'isPeriodic', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'deletedAt', alias?: string  } 
  
export interface TransactionUpdateInput {
  user?: UserUpdateOneRequiredInput | null
  amount?: number | null
  bill?: BillUpdateOneWithoutTransactionsInput | null
  billableFromDate?: string | null
  startDate?: string | null
  endDate?: string | null
  isPartOfPeriodicBill?: boolean | null
  description?: string | null
  metadata?: undefined | null
  deletedAt?: string | null
}
export type TransactionUpdateInputInputObject =
  | Extract<keyof TransactionUpdateInput, string>
  | { name: 'user', alias?: string  } 
  | { name: 'amount', alias?: string  } 
  | { name: 'bill', alias?: string  } 
  | { name: 'billableFromDate', alias?: string  } 
  | { name: 'startDate', alias?: string  } 
  | { name: 'endDate', alias?: string  } 
  | { name: 'isPartOfPeriodicBill', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'metadata', alias?: string  } 
  | { name: 'deletedAt', alias?: string  } 
  
export interface UserUpdateOneRequiredInput {
  create?: UserCreateInput | null
  update?: UserUpdateDataInput | null
  upsert?: UserUpsertNestedInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserUpdateOneRequiredInputInputObject =
  | Extract<keyof UserUpdateOneRequiredInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserUpdateDataInput {
  email?: string | null
  firstName?: string | null
  middleName?: string | null
  lastName?: string | null
  socialSecurityNumber?: string | null
  comment?: string | null
  metadata?: undefined | null
  deletedAt?: string | null
}
export type UserUpdateDataInputInputObject =
  | Extract<keyof UserUpdateDataInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'firstName', alias?: string  } 
  | { name: 'middleName', alias?: string  } 
  | { name: 'lastName', alias?: string  } 
  | { name: 'socialSecurityNumber', alias?: string  } 
  | { name: 'comment', alias?: string  } 
  | { name: 'metadata', alias?: string  } 
  | { name: 'deletedAt', alias?: string  } 
  
export interface UserUpsertNestedInput {
  update?: UserUpdateDataInput
  create?: UserCreateInput
}
export type UserUpsertNestedInputInputObject =
  | Extract<keyof UserUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface BillUpdateOneWithoutTransactionsInput {
  create?: BillCreateWithoutTransactionsInput | null
  update?: BillUpdateWithoutTransactionsDataInput | null
  upsert?: BillUpsertWithoutTransactionsInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: BillWhereUniqueInput | null
}
export type BillUpdateOneWithoutTransactionsInputInputObject =
  | Extract<keyof BillUpdateOneWithoutTransactionsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface BillUpdateWithoutTransactionsDataInput {
  user?: UserUpdateOneRequiredInput | null
  billableFromDate?: string | null
  startDate?: string | null
  endDate?: string | null
  isPeriodic?: boolean | null
  status?: prisma.BillStatus | null
  deletedAt?: string | null
}
export type BillUpdateWithoutTransactionsDataInputInputObject =
  | Extract<keyof BillUpdateWithoutTransactionsDataInput, string>
  | { name: 'user', alias?: string  } 
  | { name: 'billableFromDate', alias?: string  } 
  | { name: 'startDate', alias?: string  } 
  | { name: 'endDate', alias?: string  } 
  | { name: 'isPeriodic', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'deletedAt', alias?: string  } 
  
export interface BillUpsertWithoutTransactionsInput {
  update?: BillUpdateWithoutTransactionsDataInput
  create?: BillCreateWithoutTransactionsInput
}
export type BillUpsertWithoutTransactionsInputInputObject =
  | Extract<keyof BillUpsertWithoutTransactionsInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface TransactionUpdateManyMutationInput {
  amount?: number | null
  billableFromDate?: string | null
  startDate?: string | null
  endDate?: string | null
  isPartOfPeriodicBill?: boolean | null
  description?: string | null
  metadata?: undefined | null
  deletedAt?: string | null
}
export type TransactionUpdateManyMutationInputInputObject =
  | Extract<keyof TransactionUpdateManyMutationInput, string>
  | { name: 'amount', alias?: string  } 
  | { name: 'billableFromDate', alias?: string  } 
  | { name: 'startDate', alias?: string  } 
  | { name: 'endDate', alias?: string  } 
  | { name: 'isPartOfPeriodicBill', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'metadata', alias?: string  } 
  | { name: 'deletedAt', alias?: string  } 
  
export interface BillCreateInput {
  id?: string | null
  user?: UserCreateOneInput
  billableFromDate?: string
  startDate?: string
  endDate?: string
  isPeriodic?: boolean | null
  transactions?: TransactionCreateManyWithoutBillInput | null
  status?: prisma.BillStatus | null
  deletedAt?: string | null
}
export type BillCreateInputInputObject =
  | Extract<keyof BillCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'user', alias?: string  } 
  | { name: 'billableFromDate', alias?: string  } 
  | { name: 'startDate', alias?: string  } 
  | { name: 'endDate', alias?: string  } 
  | { name: 'isPeriodic', alias?: string  } 
  | { name: 'transactions', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'deletedAt', alias?: string  } 
  
export interface TransactionCreateManyWithoutBillInput {
  create?: TransactionCreateWithoutBillInput[]
  connect?: TransactionWhereUniqueInput[]
}
export type TransactionCreateManyWithoutBillInputInputObject =
  | Extract<keyof TransactionCreateManyWithoutBillInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface TransactionCreateWithoutBillInput {
  id?: string | null
  user?: UserCreateOneInput
  amount?: number
  billableFromDate?: string
  startDate?: string
  endDate?: string
  isPartOfPeriodicBill?: boolean | null
  description?: string | null
  metadata?: undefined | null
  deletedAt?: string | null
}
export type TransactionCreateWithoutBillInputInputObject =
  | Extract<keyof TransactionCreateWithoutBillInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'user', alias?: string  } 
  | { name: 'amount', alias?: string  } 
  | { name: 'billableFromDate', alias?: string  } 
  | { name: 'startDate', alias?: string  } 
  | { name: 'endDate', alias?: string  } 
  | { name: 'isPartOfPeriodicBill', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'metadata', alias?: string  } 
  | { name: 'deletedAt', alias?: string  } 
  
export interface BillUpdateInput {
  user?: UserUpdateOneRequiredInput | null
  billableFromDate?: string | null
  startDate?: string | null
  endDate?: string | null
  isPeriodic?: boolean | null
  transactions?: TransactionUpdateManyWithoutBillInput | null
  status?: prisma.BillStatus | null
  deletedAt?: string | null
}
export type BillUpdateInputInputObject =
  | Extract<keyof BillUpdateInput, string>
  | { name: 'user', alias?: string  } 
  | { name: 'billableFromDate', alias?: string  } 
  | { name: 'startDate', alias?: string  } 
  | { name: 'endDate', alias?: string  } 
  | { name: 'isPeriodic', alias?: string  } 
  | { name: 'transactions', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'deletedAt', alias?: string  } 
  
export interface TransactionUpdateManyWithoutBillInput {
  create?: TransactionCreateWithoutBillInput[]
  delete?: TransactionWhereUniqueInput[]
  connect?: TransactionWhereUniqueInput[]
  set?: TransactionWhereUniqueInput[]
  disconnect?: TransactionWhereUniqueInput[]
  update?: TransactionUpdateWithWhereUniqueWithoutBillInput[]
  upsert?: TransactionUpsertWithWhereUniqueWithoutBillInput[]
  deleteMany?: TransactionScalarWhereInput[]
  updateMany?: TransactionUpdateManyWithWhereNestedInput[]
}
export type TransactionUpdateManyWithoutBillInputInputObject =
  | Extract<keyof TransactionUpdateManyWithoutBillInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface TransactionUpdateWithWhereUniqueWithoutBillInput {
  where?: TransactionWhereUniqueInput
  data?: TransactionUpdateWithoutBillDataInput
}
export type TransactionUpdateWithWhereUniqueWithoutBillInputInputObject =
  | Extract<keyof TransactionUpdateWithWhereUniqueWithoutBillInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface TransactionUpdateWithoutBillDataInput {
  user?: UserUpdateOneRequiredInput | null
  amount?: number | null
  billableFromDate?: string | null
  startDate?: string | null
  endDate?: string | null
  isPartOfPeriodicBill?: boolean | null
  description?: string | null
  metadata?: undefined | null
  deletedAt?: string | null
}
export type TransactionUpdateWithoutBillDataInputInputObject =
  | Extract<keyof TransactionUpdateWithoutBillDataInput, string>
  | { name: 'user', alias?: string  } 
  | { name: 'amount', alias?: string  } 
  | { name: 'billableFromDate', alias?: string  } 
  | { name: 'startDate', alias?: string  } 
  | { name: 'endDate', alias?: string  } 
  | { name: 'isPartOfPeriodicBill', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'metadata', alias?: string  } 
  | { name: 'deletedAt', alias?: string  } 
  
export interface TransactionUpsertWithWhereUniqueWithoutBillInput {
  where?: TransactionWhereUniqueInput
  update?: TransactionUpdateWithoutBillDataInput
  create?: TransactionCreateWithoutBillInput
}
export type TransactionUpsertWithWhereUniqueWithoutBillInputInputObject =
  | Extract<keyof TransactionUpsertWithWhereUniqueWithoutBillInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface TransactionScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  amount?: number | null
  amount_not?: number | null
  amount_in?: number[]
  amount_not_in?: number[]
  amount_lt?: number | null
  amount_lte?: number | null
  amount_gt?: number | null
  amount_gte?: number | null
  billableFromDate?: string | null
  billableFromDate_not?: string | null
  billableFromDate_in?: string[]
  billableFromDate_not_in?: string[]
  billableFromDate_lt?: string | null
  billableFromDate_lte?: string | null
  billableFromDate_gt?: string | null
  billableFromDate_gte?: string | null
  startDate?: string | null
  startDate_not?: string | null
  startDate_in?: string[]
  startDate_not_in?: string[]
  startDate_lt?: string | null
  startDate_lte?: string | null
  startDate_gt?: string | null
  startDate_gte?: string | null
  endDate?: string | null
  endDate_not?: string | null
  endDate_in?: string[]
  endDate_not_in?: string[]
  endDate_lt?: string | null
  endDate_lte?: string | null
  endDate_gt?: string | null
  endDate_gte?: string | null
  isPartOfPeriodicBill?: boolean | null
  isPartOfPeriodicBill_not?: boolean | null
  description?: string | null
  description_not?: string | null
  description_in?: string[]
  description_not_in?: string[]
  description_lt?: string | null
  description_lte?: string | null
  description_gt?: string | null
  description_gte?: string | null
  description_contains?: string | null
  description_not_contains?: string | null
  description_starts_with?: string | null
  description_not_starts_with?: string | null
  description_ends_with?: string | null
  description_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  deletedAt?: string | null
  deletedAt_not?: string | null
  deletedAt_in?: string[]
  deletedAt_not_in?: string[]
  deletedAt_lt?: string | null
  deletedAt_lte?: string | null
  deletedAt_gt?: string | null
  deletedAt_gte?: string | null
  AND?: TransactionScalarWhereInput[]
  OR?: TransactionScalarWhereInput[]
  NOT?: TransactionScalarWhereInput[]
}
export type TransactionScalarWhereInputInputObject =
  | Extract<keyof TransactionScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'amount', alias?: string  } 
  | { name: 'amount_not', alias?: string  } 
  | { name: 'amount_in', alias?: string  } 
  | { name: 'amount_not_in', alias?: string  } 
  | { name: 'amount_lt', alias?: string  } 
  | { name: 'amount_lte', alias?: string  } 
  | { name: 'amount_gt', alias?: string  } 
  | { name: 'amount_gte', alias?: string  } 
  | { name: 'billableFromDate', alias?: string  } 
  | { name: 'billableFromDate_not', alias?: string  } 
  | { name: 'billableFromDate_in', alias?: string  } 
  | { name: 'billableFromDate_not_in', alias?: string  } 
  | { name: 'billableFromDate_lt', alias?: string  } 
  | { name: 'billableFromDate_lte', alias?: string  } 
  | { name: 'billableFromDate_gt', alias?: string  } 
  | { name: 'billableFromDate_gte', alias?: string  } 
  | { name: 'startDate', alias?: string  } 
  | { name: 'startDate_not', alias?: string  } 
  | { name: 'startDate_in', alias?: string  } 
  | { name: 'startDate_not_in', alias?: string  } 
  | { name: 'startDate_lt', alias?: string  } 
  | { name: 'startDate_lte', alias?: string  } 
  | { name: 'startDate_gt', alias?: string  } 
  | { name: 'startDate_gte', alias?: string  } 
  | { name: 'endDate', alias?: string  } 
  | { name: 'endDate_not', alias?: string  } 
  | { name: 'endDate_in', alias?: string  } 
  | { name: 'endDate_not_in', alias?: string  } 
  | { name: 'endDate_lt', alias?: string  } 
  | { name: 'endDate_lte', alias?: string  } 
  | { name: 'endDate_gt', alias?: string  } 
  | { name: 'endDate_gte', alias?: string  } 
  | { name: 'isPartOfPeriodicBill', alias?: string  } 
  | { name: 'isPartOfPeriodicBill_not', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'description_not', alias?: string  } 
  | { name: 'description_in', alias?: string  } 
  | { name: 'description_not_in', alias?: string  } 
  | { name: 'description_lt', alias?: string  } 
  | { name: 'description_lte', alias?: string  } 
  | { name: 'description_gt', alias?: string  } 
  | { name: 'description_gte', alias?: string  } 
  | { name: 'description_contains', alias?: string  } 
  | { name: 'description_not_contains', alias?: string  } 
  | { name: 'description_starts_with', alias?: string  } 
  | { name: 'description_not_starts_with', alias?: string  } 
  | { name: 'description_ends_with', alias?: string  } 
  | { name: 'description_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'deletedAt', alias?: string  } 
  | { name: 'deletedAt_not', alias?: string  } 
  | { name: 'deletedAt_in', alias?: string  } 
  | { name: 'deletedAt_not_in', alias?: string  } 
  | { name: 'deletedAt_lt', alias?: string  } 
  | { name: 'deletedAt_lte', alias?: string  } 
  | { name: 'deletedAt_gt', alias?: string  } 
  | { name: 'deletedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface TransactionUpdateManyWithWhereNestedInput {
  where?: TransactionScalarWhereInput
  data?: TransactionUpdateManyDataInput
}
export type TransactionUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof TransactionUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface TransactionUpdateManyDataInput {
  amount?: number | null
  billableFromDate?: string | null
  startDate?: string | null
  endDate?: string | null
  isPartOfPeriodicBill?: boolean | null
  description?: string | null
  metadata?: undefined | null
  deletedAt?: string | null
}
export type TransactionUpdateManyDataInputInputObject =
  | Extract<keyof TransactionUpdateManyDataInput, string>
  | { name: 'amount', alias?: string  } 
  | { name: 'billableFromDate', alias?: string  } 
  | { name: 'startDate', alias?: string  } 
  | { name: 'endDate', alias?: string  } 
  | { name: 'isPartOfPeriodicBill', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'metadata', alias?: string  } 
  | { name: 'deletedAt', alias?: string  } 
  
export interface BillUpdateManyMutationInput {
  billableFromDate?: string | null
  startDate?: string | null
  endDate?: string | null
  isPeriodic?: boolean | null
  status?: prisma.BillStatus | null
  deletedAt?: string | null
}
export type BillUpdateManyMutationInputInputObject =
  | Extract<keyof BillUpdateManyMutationInput, string>
  | { name: 'billableFromDate', alias?: string  } 
  | { name: 'startDate', alias?: string  } 
  | { name: 'endDate', alias?: string  } 
  | { name: 'isPeriodic', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'deletedAt', alias?: string  } 
  
export interface UserSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: UserWhereInput | null
  AND?: UserSubscriptionWhereInput[]
  OR?: UserSubscriptionWhereInput[]
  NOT?: UserSubscriptionWhereInput[]
}
export type UserSubscriptionWhereInputInputObject =
  | Extract<keyof UserSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface TransactionSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: TransactionWhereInput | null
  AND?: TransactionSubscriptionWhereInput[]
  OR?: TransactionSubscriptionWhereInput[]
  NOT?: TransactionSubscriptionWhereInput[]
}
export type TransactionSubscriptionWhereInputInputObject =
  | Extract<keyof TransactionSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface BillSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: BillWhereInput | null
  AND?: BillSubscriptionWhereInput[]
  OR?: BillSubscriptionWhereInput[]
  NOT?: BillSubscriptionWhereInput[]
}
export type BillSubscriptionWhereInputInputObject =
  | Extract<keyof BillSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  

export type UserOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'email_ASC'
  | 'email_DESC'
  | 'firstName_ASC'
  | 'firstName_DESC'
  | 'middleName_ASC'
  | 'middleName_DESC'
  | 'lastName_ASC'
  | 'lastName_DESC'
  | 'socialSecurityNumber_ASC'
  | 'socialSecurityNumber_DESC'
  | 'comment_ASC'
  | 'comment_DESC'
  | 'metadata_ASC'
  | 'metadata_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'deletedAt_ASC'
  | 'deletedAt_DESC'
  
export type BillStatusValues =
  | 'PENDING'
  | 'APPROVED'
  | 'REJECTED'
  | 'CANCELLED'
  | 'DONE'
  
export type TransactionOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'amount_ASC'
  | 'amount_DESC'
  | 'billableFromDate_ASC'
  | 'billableFromDate_DESC'
  | 'startDate_ASC'
  | 'startDate_DESC'
  | 'endDate_ASC'
  | 'endDate_DESC'
  | 'isPartOfPeriodicBill_ASC'
  | 'isPartOfPeriodicBill_DESC'
  | 'description_ASC'
  | 'description_DESC'
  | 'metadata_ASC'
  | 'metadata_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'deletedAt_ASC'
  | 'deletedAt_DESC'
  
export type BillOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'billableFromDate_ASC'
  | 'billableFromDate_DESC'
  | 'startDate_ASC'
  | 'startDate_DESC'
  | 'endDate_ASC'
  | 'endDate_DESC'
  | 'isPeriodic_ASC'
  | 'isPeriodic_DESC'
  | 'status_ASC'
  | 'status_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'deletedAt_ASC'
  | 'deletedAt_DESC'
  
export type MutationTypeValues =
  | 'CREATED'
  | 'UPDATED'
  | 'DELETED'
  
  